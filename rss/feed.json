{
    "version": "https://jsonfeed.org/version/1",
    "title": "ikmnjrd.github.io",
    "home_page_url": "https://ikmnjrd.github.io",
    "feed_url": "https://ikmnjrd.github.io/rss/feed.json",
    "description": "ikmnjrのブログ",
    "icon": "https://ikmnjrd.github.io/logo.png",
    "author": {
        "name": "ike",
        "url": "https://twitter.com/ikmnjrd"
    },
    "items": [
        {
            "id": "https://ikmnjrd.github.io/blog/GitHub-from-https-to-ssh",
            "content_html": "\n```bash\n$ git remote -v\nターミナルを開いてください。\nワーキングディレクトリをローカルプロジェクトに変更します。\n変更したいリモートの名前を取得するため、既存のリモート一覧を表示します。\n$ git remote -v\n> origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n> origin  https://github.com/USERNAME/REPOSITORY.git (push)\ngit remote set-url コマンドでリモートの URL を HTTPS から SSH に変更します。\n$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git\nリモート URL が変更されたことを検証します。\n$ git remote -v\n# Verify new remote URL\n> origin  git@github.com:USERNAME/REPOSITORY.git (fetch)\n> origin  git@github.com:USERNAME/REPOSITORY.git (push)\n```\n\n参考：[公式サイト](https://docs.github.com/ja/get-started/getting-started-with-git/managing-remote-repositories)\n",
            "url": "https://ikmnjrd.github.io/blog/GitHub-from-https-to-ssh",
            "title": "GitHubのhttpsからSSH通信への切り替え",
            "date_modified": "2021-10-29T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/Next-webpack",
            "content_html": "\n今まであまりrequireとimportなどの違いを意識できていない人間。\nNext.jsをプロジェクトに導入するのは賛成をとるが、個人のプロジェクトにはあまり使いたくないなーと思う程度の距離感を保っていた人間だった。現在無職。\n\nしかし、新たな職場を探すにあたってReactは使うのにNext.jsを触ったことがないというのは自分の選択肢を狭めるだけだと考え、無職期間に作り直そうとしていたRuby(Jekyll)製ブログを、Next.jsのSSGの仕組みを用いて作ることにした。（本当はメジャーバージョンがリリースされたばかりのeleventy.jsを使って作りたかった。フレームワークに求めているもの的にもeleventyの方が合っていたと今も感じる。1週間ほどはeleventy.js製のブログだった時期もある。）\n\n同リポジトリ内にマークダウンでブログ記事を上げるため、ビルド時に色々なものを生成したい要件が出てくる。Next.jsは内部でwebpackを使っていて`next.config.js`ではその一端を見ることができる。\n\n```javascript\nmodule.exports = {\n  reactStrictMode: true,\n  webpack(config, { isServer }) {\n    if (isServer) {\n      require('./scripts/generate-sitemap.js')\n    }\n  }\n}\n```\n\nwebpackはCommonJSで書かれていることは事前知識として知っていた。\n\nとは言ってもimportやexportが使いたい。`package.json`に`\"type\": \"module\"`を追加する方法などを試してみるが、最終的にproduction buildの際のfsモジュールが解決できないとか`Import trace for requested module:\n./pages/_app.js`などのエラーメッセージを残して終了していくプログラムを見るとイライラしてくる。\n\n勉強のためとはいえ、今度からNode.jsではなくDenoを使おうかなという気持ちになった。\n\n\n\n### 周辺用語\n- commonJS\n- ESModules\n- ES6(ES2015)\n\n### 参考文献\n- [Build a sitemap generator in Next.js - LogRocket Blog](https://blog.logrocket.com/build-sitemap-generator-nextjs/)\n- [Support ES module format (ESM) in next.config.js #9607](https://github.com/vercel/next.js/issues/9607)\n- [Support ES module format (ESM) in next.config.js #32239](https://github.com/vercel/next.js/discussions/32239)",
            "url": "https://ikmnjrd.github.io/blog/Next-webpack",
            "title": "Next.jsがWebpackを使うから嫌いという話",
            "date_modified": "2022-02-09T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/apparel-mens-hondatubasa",
            "content_html": "2021年12月21日、YouTubeで行われたLIVE配信でおすすめのアパレルブランドor古着屋として語っていたもののまとめ（語る部分は聞いていないが気付いたら配信映像の固定背景にあったもの）\n\n- DAIRIKU\n  - ダイリク\n  - [https://www.acrmtsm.jp/brands/63](https://www.acrmtsm.jp/brands/63)\n\n- stein\n  - シュタイン\n  - [https://www.acrmtsm.jp/brands/28](https://www.acrmtsm.jp/brands/28)\n\n- taupe\n  - トープ\n  - [https://www.taupe-japan.com/](https://www.taupe-japan.com/)\n\n- yoke\n  - ヨーク\n  - [https://www.yoketokyo.com/](https://www.yoketokyo.com/)\n  - [https://www.acrmtsm.jp/brands/65](https://www.acrmtsm.jp/brands/65)\n\n- AURALEE\n  - オーラリー\n  - [https://auralee.jp/](https://auralee.jp/)\n  - 自社ドメインに販売サイト持ってる。えらい。\n\n- JUMPIN' JAP FLASH\n  - 古着屋\n  - [https://jumpinjap.thebase.in/](https://jumpinjap.thebase.in/)\n  - [https://www.instagram.com/jumpinjapflash](https://www.instagram.com/jumpinjapflash)\n\n- Un Old Joke\n  - 古着屋\n  - [https://unoldjoke.thebase.in/](https://unoldjoke.thebase.in/)\n  - [https://www.instagram.com/unoldjoke](https://www.instagram.com/unoldjoke)\n",
            "url": "https://ikmnjrd.github.io/blog/apparel-mens-hondatubasa",
            "title": "本田翼コレクション（メンズおすすめ服）",
            "date_modified": "2021-12-22T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/bash-sed-docker-volume",
            "content_html": "\n### 結論\n```bash\n$ docker volume ls | sed -e 's/local[[:space:]]*//g' | grep -E '.{64,64}' | xargs docker volume rm\n```\n\nDriverの部分(localとスペース)を削除。\n64文字の（ハッシュで自動生成された）ものをリストアップ。\n削除（使用中のボリュームは削除されない）。\n\n### 説明\n気づいたら溜まってしまったdocker volumeたち。。\nふと確認してみたらえらいことになってしまっていた。\n`$ docker volume ls\n```txt\nDRIVER    VOLUME NAME\nlocal     1d516cb7225f448d8bb634875487b5eaa35d329696f77f3ae2347a3abb6aa94a\nlocal     1fbaf3b6210ce64906fffdc1ecf9d711f2d25ebe99dfc2ca3ad3f3aca1a33801\nlocal     3b4da7efd093305d43c40a004c22669f0b8ae8ac5f933c582a4168c9dff51763\nlocal     4aada75a0a85dc48abf02fdff03aab5c3fafeaf096567b6517fc6faf62511749\nlocal     5aa299e15cfeb3a5e3b41c1ab53a17382a11c64101918d916ee9d1e95b0e4672\nlocal     5cd2395082c05f3acb1f910cf77fb5a1ba1c0e845f8522912a5a82a37e0946ce\nlocal     5d76f9a14aa7462eedd428b33c6473125ecc9e442e88fcaabf06e946e20b19d9\nlocal     5f4ba17454db26acce81f3b4ce02d31e270e3c585238db4019b3a2a8482e2238\nlocal     6b4605498282f9b00b367551dfb3d121e7dcaa89626a3785d5dd2914d6138712\n```\n\nこれらをまとめて消したい。（ハッシュ値ではなく名前をきちっとつけてたものは消したくない。）\n\n`$ sed -e 's/local[[:space:]]*//g'`で加工して、\n`$ grep -E '.{64,64}'`で加工して、\ndocker volume rmコマンドの引数に渡す\n\n### ハマったポイント\n\n`$ sed -e \"s/'local[[:space:]]+'//g` とやってみたが\n`+`を1文字以上のマッチでズバッといけると思ったが`local`の部分もまとめて残ってしまった。\n\n`sed -e 's/local[[:space:]]*//g`これだとうまくいった。0文字以上だからなんか不具合起きそうとしたが...shecllscriptの正規表現はこれだから...\n\nスペースやタブを`\\s`や`\\t`で検出しようとしてたが、色々みてたら`[[:space\"]]`の方が確実っぽいような書き方してるのがちらちらと見えた気がする\n\n\n\n\n### 参考文献\n- [Regex Space character in Sed - Stack Overflow](https://stackoverflow.com/questions/15509536/regex-space-character-in-sed)\n- [正しく理解できる！シェルスクリプトとPOSIXの正規表現（令和最新版）〜 基本正規表現BREと拡張正規表現EREについて - Qiita](https://qiita.com/ko1nksm/items/53abc144558b9bb5629f)",
            "url": "https://ikmnjrd.github.io/blog/bash-sed-docker-volume",
            "title": "ネーミングを忘れて大量にできたdocker volumeをまとめて削除する方法",
            "summary": "docker volumeをshellscriptでまとめて削除する方法",
            "date_modified": "2022-07-24T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/consolelog-effect",
            "content_html": "\n### 疑問\nconsole.logの上書きで本番環境はデバッグメッセージを表示させないという技を知ったが、これがメモリに影響ないのかどうか知りたい。\n```javascript\nconsole.log = () => {}\n```\nちなみに最近ディベロッパーツールでメモリーのスナップショットを撮るという技を知った。\n\nCreate React Appで適当に作ったプロジェクトで適当にconsole.logを出力してみた。\n![ソース](https://i.gyazo.com/f55499b3db011a5c81d04c58d71b089b.png)\n\n`console.log`の呼び出しを増やしてブラウザを更新->HEAP Snapshot取得すると`console.log`の呼び出し回数に応じてメモリ使用量が一見増えるように見えたが、しばらく放置して再びHEAP Snapshotを取得するとメモリ使用量が低水準にまで戻る。GCに回収されたのかな？と想像したが、よくわからない。\n![メモリ](https://i.gyazo.com/1ef68f7e017d8ed2309a6ff90d9036ad.png)\n\n### 結論\nほぼ影響はない\n",
            "url": "https://ikmnjrd.github.io/blog/consolelog-effect",
            "title": "cosole.logをソースコードに残しておくことのメモリへの影響について",
            "date_modified": "2022-01-05T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/dataurl-markdown-contenteditable-tips",
            "content_html": "## 概要\n[オフライン環境でも使えるブラウザベースの簡易マークダウンエディタ](https://github.com/ikmnjrd/browser-local-md-editor)を作成した際に知ったことなど、\n箇条書きな内容です。　　\n\n## Tips\n- `<pre>`と`<div>`の違い。contenteditable属性と合わせて使う場合、preは改行やスペースなど入力を入力したまま保持（入出力）してくれる が、divだと改行など特にエスケープされてしまうので、\ncontenteditableと使う場合はpreを使う方がベター\n- `<head>`に`<style>`タグでcssを書くとパースがシビアになりすぐ変な挙動になるので、個々のhtmlタグのstyle属性に直書きする。今回作成した簡易的なマークダウンエディタなど、\nhtmlが少ないなら有効。\n- dataURIでhtml、特にマークダウン書式を書くならマークダウンんで多用する「#」をURLエンコードに合わせることを意識しておく。#は「%23」で表現される。\n- tabキーなど、文字入力は色々気を使わなくちゃいけない。onkeydownで処理するよりonkeyupで処理した方が都合が良いことが多い。\n- contenteditableなhtmlで参考にすべきはTwitter。Twitterすごい。\n- dataURLではWebStorageが使えない。\n- dataURLではlocationAPIが使えない(Not allowed to navigate top frame to data URL)\n\n\n### 参考文献\n- [How To Add New Line In Markdown? – WiseTut](https://wisetut.com/how-to-add-new-line-in-markdown/)\n- [Data URLs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs)\n- [jQueryでIME入力確定時にイベントを発行する - Qiita](https://qiita.com/hrdaya/items/6488d8dd3962cf35c0a0)",
            "url": "https://ikmnjrd.github.io/blog/dataurl-markdown-contenteditable-tips",
            "title": "contenteditable（HTML）とdataURIを使う際のTips",
            "summary": "オフライン環境でも使えるブラウザベースの簡易マークダウンエディタを作った時に知ったことのまとめ",
            "date_modified": "2022-08-11T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/detail-test",
            "content_html": "\ndetailstタグのテスト\n\n<details>\n  <summary>summary</summary>\ncontent\n</details>\n",
            "url": "https://ikmnjrd.github.io/blog/detail-test",
            "title": "details-test",
            "date_modified": "2021-12-22T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/docker-firebase",
            "content_html": "\n## 都合のいいdockerイメージをダウンロード\n`$ docker pull andreysenov/firebase-tools`\n\n`$ mkdir docker-firebase-test`\n\n参考: [https://hub.docker.com/r/andreysenov/firebase-tools](https://hub.docker.com/r/andreysenov/firebase-tools)\n\n## Docker関連ファイルを作成\n\n`$ vi docker-compose.yml`\n\n```yml\nversion: \"3.8\"\nservices:\n  web:\n    build: .\n    volumes:\n      - ./:/app \n    ports:\n      - \"8000:3000\"\n      - \"4000:4000\" #Emulator Suite UI\n      - \"5000:5000\" #Firebase Hosting\n      - \"5001:5001\" #Cloud Functions\n      - \"8080:8080\" #Cloud Firestore\n      - \"8085:8085\" #Cloud Pub/Sub\n      - \"9000:9000\" #Realtime Database\n      - \"9005:9005\" #Firebase Login\n      - \"9099:9099\" #Authentication\n    \n    tty: true\n    stdin_open: true\n```\n\n`$ vi Dcokerfile`\n\n```docker\nFROM andreysenov/firebase-tools\nWORKDIR /app\n```\n\n## ホスティングするファイルを用意\n今回はReactをcreate-react-appで用意\nコンテナに入ってreactをインストール\n\n`$ docker-compose build`\n\n`$ docker-compose up -d`\n\n`$ docker exec -it docker-firebase-test_web_1 sh`\n\n`$ cd /app`\n\n`$ npx create-react-app sample-app --template typescript`\n\n`$ exit`\n\n## docker-compose.ymlを編集\n`$ vi docker-compose.yml`\n\n```yml\nversion: \"3.8\"\nservices:\n  web:\n    build: .\n    volumes:\n      - ./:/app \n    command: sh -c \"cd /app/sample-app && yarn start\"\n    ports:\n      - \"8000:3000\"\n      - \"4000:4000\" #Emulator Suite UI\n      - \"5000:5000\" #Firebase Hosting\n      - \"5001:5001\" #Cloud Functions\n      - \"8080:8080\" #Cloud Firestore\n      - \"8085:8085\" #Cloud Pub/Sub\n      - \"9000:9000\" #Realtime Database\n      - \"9005:9005\" #Firebase Login\n      - \"9099:9099\" #Authentication\n    \n    tty: true\n    stdin_open: true\n```\n\n## firebaseへデプロイ\n`$ docker-compose up -d`\n\n`$ docker exec -it docker-firebase-test_web_1 sh`\n\n`$ cd /app/react-ts-app`\n\n`$ firebase login --no-localhost`\n\n`$ firebase init hosting`\n\nfirebase.jsonを編集してfirebaseが公開ディレクトリをpublicディレクトリではなく、buildディレクトリを参照するように変更\n\n`$ vi firebase.json`\n```json\n{\n  \"hosting\": {\n    \"public\": \"build\",\n    \"ignore\": [\n      \"firebase.json\",\n      \"**/.*\",\n      \"**/node_modules/**\"\n    ],\n    \"rewrites\": [\n      {\n        \"source\": \"**\",\n        \"destination\": \"/index.html\"\n      }\n    ]\n  }\n}\n\n```\n\n`$ firebase deploy`\n",
            "url": "https://ikmnjrd.github.io/blog/docker-firebase",
            "title": "DockerとFirebaseで作るReact環境構築",
            "date_modified": "2020-04-01T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/docker-log",
            "content_html": "\n### 単体コンテナ用\n`docker logs -f --tail=100 <container-name>`\n\n### docker compose用\n`docker compose logs -f --tail=10`\n\n### 参考\n- [Dockerのログが大きくなりすぎたから最新のだけ見たい](https://qiita.com/nitaking/items/4ca215b95cef2ad5e958)\n- [docker-compose logs](https://docs.docker.com/compose/reference/logs/)\n",
            "url": "https://ikmnjrd.github.io/blog/docker-log",
            "title": "Dockerにおけるログ表示",
            "date_modified": "2022-01-26T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/eleventy-high-performance-blogをGithub Pagesで使う",
            "content_html": "\nそもそも11tyを使ったのは、Next.jsのexport(静的)\n\n### Google Anarytics\ncache.jsをオリジナルのコードに直す（）\n\nプロキシ設定の解除\n\n\n### docsディレクトリに静的ファイルを吐き出す設定\n```javascript\n// eleventy.js\n    dir: {\n      input: \".\",\n      includes: \"_includes\",\n      data: \"_data\",\n      output: \"docs\",\n    },\n```\n\n### git push時のビルド設定を削除\n以下の記述を削除\n```json\n// package.json\n  \"pre-push\": [\n    \"build\"\n  ],\n```\n\n### 周辺用語\n- \n\n\n### 参考文献\n- []()",
            "url": "https://ikmnjrd.github.io/blog/eleventy-high-performance-blogをGithub Pagesで使う",
            "title": "Googles製のテンプレート「eleventy-high-performance-blog」をGithub Pagesで使う",
            "date_modified": "2022-02-06T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/esbuild-misc",
            "content_html": "\nViteを使った方が楽だけど、できるだけシンプルな環境を作りたい気持ちでesbuildを触っています。\n\n\n### configファイルを作成する場合\nwatchオプションを有効にした時、ビルド情報を出力するため[logLevel](https://esbuild.github.io/api/#log-level)をinfoにすると良い。\n```javascript\n// esbuild.config.js\nconst esbuild = require('esbuild');\n\nesbuild.build({\n  logLevel: 'info',\n})\n```\n```json\n// package.json\n{\n  ...\n  \"scripts\": {\n    \"build\": \"node esbuild.config.js\",\n  }\n  ...\n}\n```\n\n\n\n### CSS Module + TypeScriptで利用したい場合\n`esbuild-css-modules-plugin`をインストールしPluginとして読み込む([GitHubリポジトリ](https://github.com/indooorsman/esbuild-css-modules-plugin))\n\n\ndeclareファイルを`src/`以下に置いておく。\n```typescript\n// index.d.ts\ndeclare module '*.css' {\n  interface IClassNames {\n    [className: string]: string\n  }\n  const classNames: IClassNames;\n  export = classNames;\n}\n```\n\n\n### 周辺用語\n- CSS modules\n- PostCSS\n\n\n### 参考文献\n- [GitHubリポジトリ - esbuild](https://github.com/evanw/esbuild)\n- [How to set up CSS Modules with esbuild](https://how-to.dev/how-to-set-up-css-modules-with-esbuild)\n- [GitHubリポジトリ - esbuild-css-modules-plugin](https://github.com/indooorsman/esbuild-css-modules-plugin))\n- [esbuild の機能が足りないならプラグインを自作すればいいじゃない](https://www.kabuku.co.jp/developers/create-your-own-esbuild-plugin)",
            "url": "https://ikmnjrd.github.io/blog/esbuild-misc",
            "title": "esbuildを触った際の雑記",
            "summary": "esbuildについての雑記",
            "date_modified": "2022-03-15T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/event-bubbling-capturing-on-react",
            "content_html": "Reactはあまり関係ないです。\n\n筆者はReactからWebの世界に入ったため、Reactの世界観からWeb標準技術を見ることが多いですが、Reactのドキュメントを読んでいるとWeb標準なのかReactの世界の話なのかがよくわからないまま進んでしまいます。そんな状況だったので、JavaScriptの勉強を改めてしていたところに「Reactをやっていて出てきた言葉だけど、なんかよくわからないからスルーしたやつだ！」と再会を果たしたので記念にこの記事を書いています。\n\n### 例題\n\n```tsx\nfunction Hoge() {\n  return (\n    <div onClick={() => console.log(\"test\")}>\n      <p onClick={() => console.log(\"p\")} >pだよ</p>\n    </div>\n  );\n}\n```\n作成した`<p/>`をクリックすると次のようになります。これが何気なく目にしている挙動と書き方だと思います。\n\n![実行結果1](https://i.gyazo.com/63f658d09ff5f2711823f9e01fc1c2a1.png)\n\n\n次に`onClickCapture`という属性からconsole.logで結果を出力してみましょう。\n\n```tsx\nfunction Hoge() {\n  return (\n    <div onClickCapture={() => console.log(\"test\")}>\n      <p onClick={() => console.log(\"p\")} >pだよ</p>\n    </div>\n  );\n}\n```\n\nconsole.logで出力される順序が変わりました。\n\n![実行結果2](https://i.gyazo.com/3fb88bf4ba65dbc23410e35d38cf89d9.png)\n\nこれはWEBの標準仕様、DOMのイベントフローに基づいた仕様なのでvanillaJSであろうが、Reactであろうが元の考え方は一緒です。\n\n\n### イベントフロー\n`キャプチャリングフェーズ` 親から子へイベントを見ていく処理\n|\n`ターゲットフェーズ` 発生源の要素に到達した後、その要素自体の処理\n|\n`バブリングフェーズ` 発生源から親へイベントを見ていく段階\n参考: [https://www.w3.org/TR/DOM-Level-3-Events/#event-flow](https://www.w3.org/TR/DOM-Level-3-Events/#event-flow)\n\n### JavaScriptとReact\nJavaScriptではaddEventListenrで初心者的に何も意識せずにイベントを追加すると、バブリングフェーズでイベントが発火します。\n\nReactでも通常、ほとんどのイベントでバブリングフェーズで発火します。\n> 以下のイベントハンドラはイベント伝搬のバブリングフェーズで呼び出されます。キャプチャフェーズのイベントハンドラを登録するには、イベント名に Capture を追加します。たとえば、キャプチャフェーズでクリックイベントを処理するには onClick の代わりに onClickCapture を使用します。\n\n\n### addEventListenerの第3引数（オプション）\n第3引数にあたるものは`options`、もしくは`useCapture`のプロパティです。構造上、第3引数に急にBoolean(true/false)が現れたら、useCapture属性のことです。\n以下に引用したMDNの小難しく感じる文章もそこそこ理解できるようになったのではないでしょうか。\n\n\n- options\n  - capture\n    - Boolean値で、この型のイベントがDOMツリーで下に位置するEventTargetに配信dispatchされる前に、登録されたlistenerに配信されることを示します。\n  - once\n    - Boolean値で、listenerの呼び出しを一回のみのとしたいかどうかを値で指定します。trueを指定すると、listenerは一度実行された時に自動的に削除されます。\n- useCapture\n  - Boolean値で、この型のイベントが、DOMツリー内の下のEventTargetに配信される前に、登録されたlistenerに配信されるかどうかを示します。ツリーを上方向にバブリングしているイベントは、キャプチャーを使用するように指定されたリスナーを起動しません。イベントのバブリングとキャプチャーは、両方の要素がそのイベントのハンドラーを登録している場合に、別の要素内に入れ子になっている要素で発生するイベントを伝播する2つの方法です。イベント伝播モードは、要素がイベントを受け取る順番を決定します。詳細な説明は DOM Level 3 Events と JavaScript Event order を参照してください。指定されていない場合、useCaptureは既定でfalseとなります。\n\n\n### 参考\n- [https://uhyohyo.net/javascript/3_4.html](https://uhyohyo.net/javascript/3_4.html)\n- [https://developer.mozilla.org/ja/docs/Web/API/EventTarget/addEventListener](https://developer.mozilla.org/ja/docs/Web/API/EventTarget/addEventListener)\n- [https://ja.reactjs.org/docs/events.html](https://ja.reactjs.org/docs/events.html)\n- [https://ja.reactjs.org/blog/2020/08/10/react-v17-rc.html#no-event-pooling](https://ja.reactjs.org/blog/2020/08/10/react-v17-rc.html#no-event-pooling)\n",
            "url": "https://ikmnjrd.github.io/blog/event-bubbling-capturing-on-react",
            "title": "イベントキャプチャリングとバブリング（React）",
            "date_modified": "2022-01-17T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/express-node-difference",
            "content_html": "\n\n### 疑問\nNode.jsはnodeコマンドでWebサーバーとして立ち上がるみたいだけど、一方expressもある。\nnodeコマンドで立ち上がるWebサーバーとexpressは何が違うんだ！！！！\n\n\n### 参考文献\n- [https://developer.mozilla.org/ja/docs/Learn/Server-side/Express_Nodejs/Introduction](https://developer.mozilla.org/ja/docs/Learn/Server-side/Express_Nodejs/Introduction)\n",
            "url": "https://ikmnjrd.github.io/blog/express-node-difference",
            "title": "疑問メモ_NodejsとExpressの違い",
            "date_modified": "2021-12-26T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/font-what-is",
            "content_html": "### フォント\nデジタルデータとしてフォントを表示するには切っても切り離せない。\nこれはもちろんWebの世界でも、ネイティブアプリの世界でも一緒。\n\nフォントがない世界はありえない。\n\n### 歴史？\nAdobeはフォントという存在を意識できる人なら誰でも知ってる。\n「Adobe Illustrator」「Adobe Photoshop」などに始まり、印刷用に開発されたPostScriptなどを開発したりしていた。\n\ntruetype(.ttf)\nwoff(.wof)\nwoff2(.woff2)\nなどの拡張子がある。\n\n### フォントをユーザーにどう届けるか\n* クライアントにプリインストールされているフォントを使う\n* 自サーバーから配信\n* Webフォントを使う（配信されているものにタダ乗り）\n\n#### ライアントにプリインストールされているフォントを使う\n\n- macOS Big Sur\n  - [https://support.apple.com/ja-jp/HT211240](https://support.apple.com/ja-jp/HT211240)\n- Windows 11\n  -  [https://docs.microsoft.com/en-us/typography/fonts/windows_11_font_list](https://docs.microsoft.com/en-us/typography/fonts/windows_11_font_list)\n- iOS\n  - [https://developer.apple.com/fonts/system-fonts/](https://developer.apple.com/fonts/system-fonts/)\n- Android\n  - 端末メーカーによる場合があり\n\n#### 自サーバーから配信\n主要ブラウザはwoff2に対応しているので、woff2で用意するば十分。\n\n[対応ブラウザ](https://caniuse.com/woff2)\n\n#### Webフォントを使う\n有名なものとして\n- [Google Fonts](https://googlefonts.github.io/japanese/)\n- [REALTYPE](https://www.realtype.jp/)\n\n\n### 参考文献\n- [各OSの標準搭載フォント一覧へのリンク集  |  Rriver](https://parashuto.com/rriver/development/preinstalled-font-list-by-operating-system)\n\n",
            "url": "https://ikmnjrd.github.io/blog/font-what-is",
            "title": "フォントについて",
            "date_modified": "2022-02-06T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/gcp-cloud-build-complain",
            "content_html": "### 疑問に遭遇した状況\n最近 Cloud Run にハマってる。Cloud SDK こと gcloud コマンドで Artifact Registry(Container Registry)にアップロードしてほいっと `gcloud run deploy` ですぐにサービスが公開できて気持ちがいい。\n\nじゃあそろそろGithub ActionsでCI/CDの設定でもしようかと思ったら、サービスの概念が自分の中で咀嚼できていなかったことに気がついた。そこでの疑問は以下だ。\n\n### 疑問\n**Cloud Build なんやねんこいつ** である。\n\n`google-github-actions/setup-gcloud` を使ってワークフローを使っていると、次のような形になる。\n\n```yaml\nname: Build and Push Image\n\non:\n  push:\n    tags:\n    - \"*\"\n\njobs:\n  build-and-publish:\n    name: Build and Push docker image\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v2\n      with:\n        ref: ${{ github.ref }}\n\n    - name: Setup Google Cloud\n      uses: google-github-actions/setup-gcloud@v0\n      with:\n        service_account_key: ${{ secrets.GCLOUD_AUTH }}\n        project_id: node-datastore-test-111\n\n    - name: Configure docker for artifact registry\n      run: |\n        gcloud auth configure-docker asia-northeast1-docker.pkg.dev\n\n    - name: set TAG\n      run: |\n        echo \"TAG=$(echo $GITHUB_REF | awk -F/ '{print $NF}')\" >> $GITHUB_ENV\n\n    - name: Build\n      run: |\n        docker build -t asia-northeast1-docker.pkg.dev/node-datastore-test-111/node-datastore-test-repo/node-datastore-test-image:${{ env.TAG }} ./\n\n    - name: Push\n      run: |\n        docker push asia-northeast1-docker.pkg.dev/node-datastore-test-111/node-datastore-test-repo/node-datastore-test-image:${{ env.TAG }}\n\n    - name: Deploy\n      run: |\n        gcloud run deploy test-service --image asia-northeast1-docker.pkg.dev/node-datastore-test-111/node-datastore-test-repo/node-datastore-test-image:${{ env.TAG }} --region asia-northeast1 --platform managed --allow-unauthenticated\n\n```\n\nせっかくdockerコマンドの羅列で気持ちよくなれてたのに、deployはgcloudコマンドに戻ってくる。\n\n...?\nCloud Buildを挟まないとArtifact RegistryからCloud Runへデプロイできないと思い込んでいたけど、Cloud RunにデプロイするためにArtifact RegistryにビルドしたDocker Imageをアップロードしてるだけで、Cloud Buildいらんやん。。。\n\nなんやねん Cloud Build こいつは、でした。\n\n\n### 周辺用語\n- Github Actions\n- Cloud SDK\n- Cloud Build\n\n\n### 参考文献\n- [Cloud Run へのデプロイ](https://cloud.google.com/artifact-registry/docs/integrate-cloud-run#command-line)\n",
            "url": "https://ikmnjrd.github.io/blog/gcp-cloud-build-complain",
            "title": "GCPのCloudBuildなんやねんこいつ",
            "date_modified": "2022-01-30T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/gcp-cloudrun-price",
            "content_html": "\nGoogleが提供してくれているCloud Runは便利ですよね。私は普段Reactでクライアント側を触っていてFirebaseで済ませることが多いのですが、Cloud Runの便利さに感化されてRDBも使いたくなりました。（FirebaseはNoSQLしか提供してくれていないので...）\n\nしかしへっぽこアプリに使うにはいかんせん料金が気になったところで、予想よりも今回の用途には高級すぎました。今回の判断の元になった部分をまとめます。\n\n自称へっぽこアプリへの、想定されるトラフィックとしては1日に1件リクエストがあるかといったレベルのものを想定して話を進めます。\n\nまず第一にCloud Runを使用する。そこにクラウドサービスを利用してRDBを接続したい。\nそうなった時の候補は、次の2つで、こちらの料金を概算していきます。\n1. Cloud Run と Cloud SQL\n2. Cloud RunにホストしたAPIサーバーをVPS上のDBサーバーに繋ぐ\n\n\n\n\n### 注意事項\n1$=100円で計算しています。\n\n料金は全て東京リージョンで計算しています。\n\n\n## **1. Cloud SQLの料金**\n1ヶ月あたり800円。\n\n#### 内訳\n1. ストレージとネットワークの料金\n  * SSD ストレージ容量: 1 GB あたり $0.221/月\n  * HDD ストレージ容量: 1 GB あたり $0.117/月\n2. ネットワーク下り（外向き）の料金\n  * 送信先 Google プロダクトであれば大陸内は無料\n  * インターネット下り（外向き、Cloud Interconnect を使用する場合）は$0.05/GB\n  * インターネット下り（外向き、Cloud Interconnect を使用しない場合）は$0.19/GB\n3. インスタンスの料金\n\n| 共有コア マシンタイプ | 仮想 CPU 数 |RAM（GB） |最大ストレージ容量|1ヶ月あたりの料金（米ドル）\n|:-----------|:------------|:------------|:------------|:------------|\n| db-f1-micro | 共有  | 0.6 | 3,062 GB | $7.67 |\n| db-g1-small | 共有  | 1.7 | 3,062 GB | $25.55 |\n\n\n\nCloudFunctionsで停止と起動をスケジューリングしてことを解説している[Google Cloudのブログ](https://cloud.google.com/blog/ja/topics/developers-practitioners/lower-development-costs-schedule-cloud-sql-instances-start-and-stop)もあります。\n\n\n## **2. 他社VPSにDBサーバを建て接続**\n必要なもの(料金計算対象)\n* VPS(今回はConoHa)\n* Cloud NAT\n* 静的IPアドレス\n\n\n### **ConoHaのVPSの料金**\n1ヶ月あたり682円\n\nメモリ: 512MB、\nCPU: 1コア、\nSSD: 30GB\n\n\n### **Cloud NATの料金**\n1ヶ月あたり数円\n\n| 割り当てられている VM インスタンスの数 | 1 時間あたりの料金 | 処理された 1 GB あたりの料金（下りと上り（外向きと内向き）の両方） |\n|:-----------|:------------|:------------|\n| 32 VM インスタンスまで | $0.0014 × ゲートウェイを使用している VM インスタンスの数 | $0.045   |\n|32 VM インスタンスを超える場合|$0.044|\t$0.045\n\n参考：[https://cloud.google.com/nat/pricing?hl=ja](https://cloud.google.com/nat/pricing?hl=ja)\n\n\n### **静的IPアドレス**\n1ヶ月あたり1,080円\n\n静的IPアドレス（割り当て済み、未使用）\t1時間あたり$0.015\n\n参考:[https://cloud.google.com/compute/all-pricing#ipaddress](https://cloud.google.com/compute/all-pricing#ipaddress)\n\n\n### その他参考\n- [https://cloud.google.com/run/docs/configuring/static-outbound-ip](https://cloud.google.com/run/docs/configuring/static-outbound-ip?hl=ja)\n",
            "url": "https://ikmnjrd.github.io/blog/gcp-cloudrun-price",
            "title": "Google Cloud Runで動かすアプリをRDBに接続した際の料金を考える",
            "date_modified": "2022-01-10T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/gcp-gcloud-command-often-used",
            "content_html": "\n主にCloudRun周辺の。すごく個人的なまとめです。\n\n## コマンド\n### 一般枠\n- `gcloud --help`\n- `gcloud config --help`\n- `gcloud config configurations list`\n- `gcloud config configurations create <configuration-name>`\n- `gcloud config configurations activate <configuration-name>`\n- `gcloud projects list`\n- `gcloud config set project <your-project-id>`\n- `gcloud config set project <project-name>`\n- `gcloud projects create <you-project-id> --name <your-project-name>`\n\n\n### Cloud BuildとArtifact RegistryとCloud Run\n- `gcloud services enable  artifactregistry.googleapis.com cloudbuild.googleapis.com`\n- `gcloud artifacts repositories list`\n- ` gcloud artifacts repositories create <repository-name> --repository-format=docker --location=asia-northeast1 --description=\"Docker repository hoge\"`\n- `gcloud builds submit --tag asia-northeast1-docker.pkg.dev/<you-project-id>/<repository-name>/<image-name>:tag1`\n- `gcloud run deploy <service-name> --image asia-northeast1-docker.pkg.dev/<you-project-id>/<repository-name>/<image-name>:tag1 --region asia-northeast1 --platform managed --allow-unauthenticated`\n\n\n### その他メモ\n- `gcloud builds submit`時にカレントディレクトリのDockerfileがアップロードされてビルドされるものだと思ってたけど、[公式ドキュメント](https://cloud.google.com/sdk/gcloud/reference/builds/submit)を見てもそうは書いてない？とりあえずカレントディレクトリの\n- Cloud Runがデフォルトで外部接続に使うポートは8080ってまじ？\n\n",
            "url": "https://ikmnjrd.github.io/blog/gcp-gcloud-command-often-used",
            "title": "よく使うgcloudコマンド",
            "summary": "Google Cloud Platform（gcloud）の個人的によく使うコマンドを備忘録的にまとめています。",
            "date_modified": "2022-01-09T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/google-search-console-regist",
            "content_html": "\n## 前提\n私はGitHub Pagesで[Jekyll/minima](https://github.com/jekyll/minima)を利用しているので、同様な構成な方に向けた記事です。\n\n## サイトマップを作成\njekyllのプラグインを利用してサイトマップを作成するため `_config.yml` に以下を記述。\n```yml\nplugins:\n- jekyll-sitemap\n```\n\n作成されたサイトマップは以下のURLで確認できる。\n\n`https://{ユーザー名}.github.io/sitemap.xml`\n\n\n## gtag(Google analytics)を埋め込む\nGoogle analyticsを仕込んでいることが前提になっているようなので、事前に設定を済ます。\n\n私のようにGitHub Pagesで[Jekyll/minima](https://github.com/jekyll/minima)を利用している場合\n`_config.yml` に以下のような記述をする。\n```yml\ngoogle_analytics: G-WXXXXXXXXX\n```\n\n## Google Search Consoleにアクセス\n[https://search.google.com/search-console](https://search.google.com/search-console)にアクセスする。\n\n\n\nサーチコンソールのロゴ下のメニューをクリックし、開いたメニューの中から「プロパティ追加」をクリック。\n![俯瞰図](https://i.gyazo.com/dce2b95d46361ad38e873d5e5e9e9291.png)\n\n\n\nURLプレフィックスで自身のページ（`https://{ユーザー名}.github.io`）を入力。続行をクリック。\n![追加画面](https://i.gyazo.com/2d834c38eedd04d1d42663f7dcc4a1c0.png)\n\n\n\n登録直後の画面\n![登録直後](https://i.gyazo.com/c3ccc8921cac92ce03d4964cc6a78e84.png)\n\n\n\n### サイトマップを登録\n左側のメニューから、「インデックス」->「サイトマップ」をクリックする\nサイトマップを送信する。\n![サイトマップ登録](https://i.gyazo.com/e987cfaa2328b58a5b42d9d070929f48.png)\n\n\n\nサイトマップ送信直後は以下のようになる。\n![サイトマップ送信直後](https://i.gyazo.com/eaf2aa36d0e725c9f4a01da5ef6c833f.png)\n\n\n\nあとは処理が完了するまで数日待ちます。\n\n## 確認（数日後）\n\nサマリー（検索パフォーマンス）\n![数日後サマリー](https://i.gyazo.com/70fde43f72dc84263a0f662eb5c8e4af.png)\n\nサイトマップ\n![数日後サイトマップ](https://i.gyazo.com/175db4f4b7552d5169601a659b7ece4a.png)\n\n## 注意\nGoogle Analyticsタグの埋め込みなどは利用しているJeykllテーマによって異なる場合があります。自身の利用しているリモートテーマをしっかりと確認しましょう。\n\n### 参考文献\n- [https://netchira.github.io/blog/githubpages/SEOsono1.html](https://netchira.github.io/blog/githubpages/SEOsono1.html)\n- [https://developers.google.com/search/docs/beginner/seo-starter-guide](https://developers.google.com/search/docs/beginner/seo-starter-guide)\n",
            "url": "https://ikmnjrd.github.io/blog/google-search-console-regist",
            "title": "GitHub Pages(Jeykyll)をGoogle Search Consoleに登録",
            "date_modified": "2021-12-28T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/gyazo-blog-useful",
            "content_html": "\n大好きなWebサービス「Gyazo」の紹介です。\n\n簡単にこのサービスを説明すると、Gyazoを使ってスクリーンショットを撮ると無料のクラウドサーバーにアップロード&URLが発行され、共有が簡単にできるサービスです。\n\n`https://gyazo.com/37f2d7be5ea5964c6aa339f0aa95c9f8`\n![例](https://i.gyazo.com/37f2d7be5ea5964c6aa339f0aa95c9f8.png)\n\n\nこのようにすると、画像を直接指定できる。\n\n`https://i.https://gyazo.com/37f2d7be5ea5964c6aa339f0aa95c9f8.png`\n\n以下のようにするとサイズを指定できる\n\n`https://i.gyazo.com/thumb/300/37f2d7be5ea5964c6aa339f0aa95c9f8.png`\n\nこれを応用すると、画像を自前でホストせずに、最適化した画像によるレスポンシブ対応がhtmlだけでできる。\n\n```html\n  <img\n    src=\"https://i.gyazo.com/37f2d7be5ea5964c6aa339f0aa95c9f8.png\"\n    srcset=\"https://i.gyazo.com/thumb/320/37f2d7be5ea5964c6aa339f0aa95c9f8.png 320w,\n            https://i.gyazo.com/thumb/640/37f2d7be5ea5964c6aa339f0aa95c9f8.png 640w,\n            https://i.gyazo.com/thumb/1280/37f2d7be5ea5964c6aa339f0aa95c9f8.png 1280w\"\n    sizes=\"(max-width:1280px) 100vw, 1280px\"\n  >\n```\n\n`<picture/>`と`<source/>`を使えばより柔軟に設定できる。\n\n\n### 周辺用語\n- レスポンシブデザイン\n- srcset\n- ポリフィル「picturefill」\n\n### 参考文献\n- [レスポンシブ画像 - ウェブ開発を学ぶ | MDN](https://developer.mozilla.org/ja/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)\n- [HTML 5.1のsrcset・sizes属性とpicture要素の使い方 - レスポンシブイメージで画像表示を最適化 - ICS MEDIA](https://ics.media/entry/13324/)\n",
            "url": "https://ikmnjrd.github.io/blog/gyazo-blog-useful",
            "title": "Gyazoをブログ用の画像ホストとして使い倒す",
            "date_modified": "2022-02-11T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/hamburger-css-animation",
            "content_html": "\n## サンプルコード\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwLeEOj\" data-user=\"ikmnjrd\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/ikmnjrd/pen/RwLeEOj\">\n  CSS-hamburger</a> by ike (<a href=\"https://codepen.io/ikmnjrd\">@ikmnjrd</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n### 重要なポイント\n\n#### CSSプロパティ\n```css\nbackground: currentColor;\n```\n参考:[https://zenn.dev/phi/articles/css-tips-currentcolor](https://zenn.dev/phi/articles/css-tips-currentcolor)\n\n#### アニメーションのイージング\n- `cubic-bezier`\n  - [cubic-bezier を知る。](https://qiita.com/96usa_koi/items/6f313f1d664806a77313)\n\n#### アニメーション\n座標変換の原点を設定する`transform-origin`\n\n#### WAI-ARIA\naria-expanded=\"false\"\n\n",
            "url": "https://ikmnjrd.github.io/blog/hamburger-css-animation",
            "title": "CSSアニメーションで作るハンバーガーメニュー",
            "date_modified": "2022-01-12T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/icon-of-tech-tools-with-drawio",
            "content_html": "\n### まずは検索\n検索してみる。\n![draw.io検索](https://i.gyazo.com/d68e020225a55e471084351f8512ad1c.png)\n\ndraw.ioで`https://~`を参照する形で読み込んでしまうとエクスポート時に画像が表示されないので注意。\n\n### 検索してないなら\n[いい感じにまとめてくれているQiita記事](https://qiita.com/tkit/items/932316c5f5f7b162b61e)\n\n\n### 何がなんでもアイコンを使いたい\n[https://vecta.io/symbols](https://vecta.io/symbols)\n\n### svgでもいいなら\n[https://devicon.dev/](https://devicon.dev/)\n",
            "url": "https://ikmnjrd.github.io/blog/icon-of-tech-tools-with-drawio",
            "title": "draw.ioで作る技術資料に使うツールアイコン",
            "date_modified": "2022-01-28T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/iterm-enable-option-b",
            "content_html": "### 前提\n\nterminal操作で`ctrl+a`を押せば行頭へ戻る  \n`ctrl+e`を押せば行末へ移動  \n`ctrl+u`を押せばカーソル位置から行頭まで削除  \nここまではいい。  \n\nしかし、  \n`option + b`や`option + f`を使って1単語分の移動をしようとすると筆記体のfやルート記号が入力され移動できない  \n(MacのoptionはしばしばAltと同等)  \n\n### 結論\n\niTerm側の設定を変更する。  \n画像のLeft Option keyがNormalがデフォルトの設定のはずなので、Esc+に変更する\n![iTerm](https://i.gyazo.com/89dddef08769a9f3f3e3c59408a83ce9.png)\n\n### 参考文献\n\n- [macos - Bash keyboard shortcuts in iTerm like Alt+d and Alt+f - Stack Overflow](https://stackoverflow.com/questions/18923765/bash-keyboard-shortcuts-in-iterm-like-altd-and-altf)\n",
            "url": "https://ikmnjrd.github.io/blog/iterm-enable-option-b",
            "title": "iTermで1単語分の移動をできるようにする",
            "summary": "僕の疑問に追記する形で更新しています。",
            "date_modified": "2022-08-27T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/javascript-namespace-push-me-in-pit",
            "content_html": "\nハマったポイントとその解決策を書く。\n\n### ハマったポイント\n\nなぜ②の箇所で変数`audio`にアクセスできてしまうの？？？？\n\n```javascript\nconst init = () => {\n\n  const upload_file = document.getElementById('uploadedFile');\n  const audio = document.getElementById('audio');\n\n  upload_file.addEventListener('change', (e) => {\n    audio.src = URL.createObjectURL(e.target.files[0]);\n\n    console.log(audio); // ①\n    audio.load();\n    audio.play();\n    draw();\n  });\n}\n\nconst draw = () => {\n  console.log(audio); // ②\n}\n\nwindow.onload = init();\n\n```\n\noutput例\n```html\n<audio id=\"audio\" controls=\"\" src=\"blob:http://localhost:8080/b691c70c-4570-4659-97d3-45577d80ec21\"></audio>\n<audio id=\"audio\" controls=\"\" src=\"blob:http://localhost:8080/b691c70c-4570-4659-97d3-45577d80ec21\"></audio>\n```\n\n\n### 起こっていたこと\nググったらすぐに出てきた。\n> タイトルの通りなんですが, HTML の DOM に指定した id はすべて同じ変数名としてグローバル変数に格納されます.\n参考: [https://zenn.dev/phi/articles/javascript-tips-dom-id-global](https://zenn.dev/phi/articles/javascript-tips-dom-id-global)\n\n\n```javascript\nconst init = () => {\n\n  const upload_file = document.getElementById('uploadedFile');\n  const audio2 = document.getElementById('audio');\n\n  upload_file.addEventListener('change', (e) => {\n    audio2.src = URL.createObjectURL(e.target.files[0]);\n\n    console.log(audio); // ①\n    audio2.load();\n    audio2.play();\n    draw();\n  });\n}\n\nconst draw = () => {\n  console.log(audio);\n  console.log(audio2); // ②\n}\n\nwindow.onload = init();\n```\noutput例\n```jsstacktrace\nscript.js:40 <audio id=​\"audio\" controls src=​\"blob:​http:​/​/​localhost:​8080/​b337de48-6ba2-459b-a022-d56dae3da9d3\">​…​</audio>​\nscript.js:41 Uncaught ReferenceError: audio2 is not defined\n    at draw (script.js:41)\n    at HTMLInputElement.<anonymous> (script.js:30)\ndraw @ script.js:41\n```\n\n\n\n### 解決案\n\nidは慎重に名付けしよう。\n\n\n### 周辺用語\n- グローバル変数\n- DOM\n\n\n### 参考文献\n- [https://zenn.dev/phi/articles/javascript-tips-dom-id-global](https://zenn.dev/phi/articles/javascript-tips-dom-id-global)\n",
            "url": "https://ikmnjrd.github.io/blog/javascript-namespace-push-me-in-pit",
            "title": "JavaScript名前空間でハマった話",
            "date_modified": "2021-12-30T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/javascript-smartload-fs-module",
            "content_html": "### 前提\nNode.jsで開発するとき、`fs`はかなりよく使う。\nそして私はまだwebpackの呪縛から逃れられていないので、CommonJSで書きたい場面が多い。\nそして現在で使うときは大抵`Promise型`で使う。\n\n### 結論\nそんなときには次のように書くとスマート\n```javascript\nconst { promises: fs } = require('fs')\n```\n\nこういう書き方でもいい。\n```javascript\nconst fs = require('fs').promises;\n```\n\n\n### 参考文献\n- [https://github.com/vercel/next.js/blob/canary/examples/blog/scripts/gen-rss.js](https://github.com/vercel/next.js/blob/canary/examples/blog/scripts/gen-rss.js)\n- [[Node.js]fs.promises APIの使い方](https://tech.chakapoko.com/nodejs/file/promises.html)\n",
            "url": "https://ikmnjrd.github.io/blog/javascript-smartload-fs-module",
            "title": "CommonJSでもスマートにfsモジュールを読み込む",
            "date_modified": "2022-02-03T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/javascript-summary-of-ecma-specs",
            "content_html": "\n### まとめ\nここを見ろ\n- [https://developer.mozilla.org/ja/docs/Web/JavaScript/Language_Resources](https://developer.mozilla.org/ja/docs/Web/JavaScript/Language_Resources)\n\nGitHubリポジトリや公式ページは過去の仕様が見辛い\n- [https://github.com/tc39/ecma262](https://github.com/tc39/ecma262)\n- [https://tc39.es/](https://tc39.es/)\n",
            "url": "https://ikmnjrd.github.io/blog/javascript-summary-of-ecma-specs",
            "title": "歴代ECMAScript仕様情報のまとめ",
            "date_modified": "2022-01-16T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/javascript-weakmap-usage",
            "content_html": "\n### WeakMapとは\nES2015で追加された仕様。ハッシュテーブルの一種。\nMDNには以下のように書かれています。\n>The WeakMap object is a collection of key/value pairs in which the keys are weakly referenced.\n\n`weakly referenced keys`(弱い参照) という概念がキモ。\n\n\n似たオブジェクトとの一番わかりやすい違いが、キーにすることができるデータ型です。\n| オブジェクト | プロパティキーにできるもの | 値にできるもの |\n|:-----------|:------------|:------------|\n| WeakMap   | Object      | 任意            |\n| Object    | 文字列, Symbol    | 任意       |\n| Map       | 関数、オブジェクト、あらゆるプリミティブなど    | 任意      |\n\nちなみにArray型（配列）は、キーバリューのかたち（キー付きコレクション）ではないです。逆にArrayやInt8Arrayなどは索引付きコレクションと呼ばれています。[参考:「標準組み込みオブジェクト」](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects)\n\n上の表を見た個人的感想はWeakMapはObjectと似ているな、と思うので今回の比較に用いていきたいと思います。\n\n### Objectとの違い、使い分け\n\n雑な説明ですが、JavaScriptではプロトタイプチェーンの仕組みにより、新しいオブジェクトを作ると元にしたオブジェクトを参照しながらメモリに保持されます。\n\n> キーによるオブジェクト参照は弱く保持され、そのオブジェクトへの参照が他に存在しないときはガベージコレクション (GC) の対象になります\n> <cite>出典: [MDN-キー付きコレクション](https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object)</cite>\n\nこれが\"弱い参照\"とされる理由の一つです。\n> Map オブジェクトとの違いの１つは、WeakMap のキーは列挙可能ではないことです（すなわち、キーのリストを取得するメソッドがありません）。もしも列挙可能であれば、リストは非決定性をもたらす、ガベージコレクションの状態に依存することになってしまいます。\n> <cite>出典: [MDN-キー付きコレクション](https://developer.mozilla.org/ja/docs/Web/JavaScript/Guide/Keyed_collections#weakmap_object)</cite>\n\n\n\n### 使い方の例\n\n```javascript\n  // HTMLMediaElement用\n  var audioEle;\n  var wm = new WeakMap();\n\n  /* 〜中略〜 */\n\n  // WeakMapでHTMLMediaElementを保持する\n  if (wm.has(audioEle)) {\n    audioSourceNode = wm.get(audioEle);\n  } else {\n    audioSourceNode = audioCtx.createMediaElementSource(audioEle);\n    wm.set(audioEle, audioSourceNode);\n  }\n```\n出典:[https://github.com/TakeshiOkamoto/waveform-spectrum/blob/master/waveform-spectrum.js](https://github.com/TakeshiOkamoto/waveform-spectrum/blob/master/waveform-spectrum.js)\n\n### 参考\n- [WeakMap Objects-sec](https://262.ecma-international.org/#sec-weakmap-objects)\n- [tc39-GitHub](https://github.com/tc39/ecma262-6-src)\n- [MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/WeakMap)\n- [https://uhyohyo.net/javascript/16_1.html](https://uhyohyo.net/javascript/16_1.html)\n- [https://github.com/TakeshiOkamoto/waveform-spectrum/blob/master/waveform-spectrum.js](https://github.com/TakeshiOkamoto/waveform-spectrum/blob/master/waveform-spectrum.js)\n",
            "url": "https://ikmnjrd.github.io/blog/javascript-weakmap-usage",
            "title": "WeakMapの使い所",
            "date_modified": "2022-01-16T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/javascript-why-appear-eval",
            "content_html": "\n### 疑問\nなんでWebpack?esbuild?などでトランスパイルしたjsファイルにeval(withも?みたことはないけど)が頻出するの？\nMDNを見たけど、危険ってことしかわからなかった。\n自分なりに考えた理由としてはevalは機械語(ネイティブコード)に近いからコンパイルが楽になると予想した。\n\n### 自分なりの回答\n`eval`は[標準組み込みオブジェクト](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects)として実装されているから、と言う説\n\n### 周辺用語\n- \n\n\n### 参考文献\n- [標準組み込みオブジェクト](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects)\n",
            "url": "https://ikmnjrd.github.io/blog/javascript-why-appear-eval",
            "title": "疑問メモ_evalが頻出するのはなぜ",
            "date_modified": "2021-12-26T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/javascript-why-var-const-togetter",
            "content_html": "### 疑問に遭遇した状況\nNext.jsで`$ next export`が気になり、`~/node_modules/next/dist/cli/next-export.js`を見ていた。\n\n### 疑問\nグローバル宣言している`var`とES2015(ES6)から追加された`const`と`let`が共存している。なぜ？？\n\n```javascript\n#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.nextExport = void 0;\nvar _path = require(\"path\");\nvar _fs = require(\"fs\");\nvar _indexJs = _interopRequireDefault(require(\"next/dist/compiled/arg/index.js\"));\nvar _export = _interopRequireDefault(require(\"../export\"));\nvar _utils = require(\"../server/lib/utils\");\nvar _trace = require(\"../trace\");\nvar _isError = _interopRequireDefault(require(\"../lib/is-error\"));\nvar _getProjectDir = require(\"../lib/get-project-dir\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst nextExport = (argv)=>{\n    const nextExportCliSpan = (0, _trace).trace('next-export-cli');\n    const validArgs = {\n        // Types\n        '--help': Boolean,\n        '--silent': Boolean,\n        '--outdir': String,\n        '--threads': Number,\n        // Aliases\n        '-h': '--help',\n        '-s': '--silent',\n        '-o': '--outdir'\n    };\n    let args;\n    try {\n        args = (0, _indexJs).default(validArgs, {\n            argv\n        });\n    } catch (error) {\n        if ((0, _isError).default(error) && error.code === 'ARG_UNKNOWN_OPTION') {\n            return (0, _utils).printAndExit(error.message, 1);\n        }\n        throw error;\n    }\n    if (args['--help']) {\n        console.log(`\n      Description\n        Exports the application for production deployment\n\n      Usage\n        $ next export [options] <dir>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        -h - list this help\n        -o - set the output dir (defaults to 'out')\n        -s - do not print any messages to console\n    `);\n        process.exit(0);\n    }\n    const dir = (0, _getProjectDir).getProjectDir(args._[0]);\n    // Check if pages dir exists and warn if not\n    if (!(0, _fs).existsSync(dir)) {\n        (0, _utils).printAndExit(`> No such directory exists as the project root: ${dir}`);\n    }\n    const options = {\n        silent: args['--silent'] || false,\n        threads: args['--threads'],\n        outdir: args['--outdir'] ? (0, _path).resolve(args['--outdir']) : (0, _path).join(dir, 'out')\n    };\n    (0, _export).default(dir, options, nextExportCliSpan).then(()=>{\n        nextExportCliSpan.stop();\n        (0, _utils).printAndExit(`Export successful. Files written to ${options.outdir}`, 0);\n    }).catch((err)=>{\n        nextExportCliSpan.stop();\n        (0, _utils).printAndExit(err);\n    });\n};\nexports.nextExport = nextExport;\n\n//# sourceMappingURL=next-export.js.map\n```\n\n### 周辺用語\n- Next.js\n- ESModules\n- CommonJS\n\n\n### 参考文献\n- [MDN - Object.defineProperty()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- [javascript.info - モジュール, 導入](https://ja.javascript.info/modules-intro)\n",
            "url": "https://ikmnjrd.github.io/blog/javascript-why-var-const-togetter",
            "title": "疑問_なぜvarとconstが共存しているのか",
            "date_modified": "2022-01-23T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/jekyll-favicon-setup",
            "content_html": "\n## 前提\n私はGitHub Pagesで[Jekyll/minima](https://github.com/jekyll/minima)を利用しているので、同様な構成な方に向けた記事です。\n\n\n## favicon設定\n./includes/custom-head.htmlに以下のコードを追記\n\n```html\n<link rel=\"icon\" href=\"/favicon.ico\">\n```\n\n用意したfaviconをルートディレクトリに配置。\n![リポジトリ](https://i.gyazo.com/f1dd722b4abdecd1fa61907db9601047.png)\n\n\n## 参考にしたもの\n- [https://zenn.dev/pacchiy/articles/e4dcd7bd29d387](https://zenn.dev/pacchiy/articles/e4dcd7bd29d387)\n",
            "url": "https://ikmnjrd.github.io/blog/jekyll-favicon-setup",
            "title": "jekyllでfaviconを設定",
            "date_modified": "2021-12-31T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/jekyll-footer-override",
            "content_html": "\nできるだけ楽をしてブログを続けるために仕方なくGitHub PagesでJekyllを使ってる人は僕以外にいることと思う。\n\n~~今となっては古いデザインのものが多く、好みのテーマを見つけることすらめんどくさかった。それすら古さが漂う~~\n\nせっかく見つけたテーマのうち1部分だけ気に入らない時の対処法を書く。\nちなみにテーマは[minima](https://github.com/jekyll/minima)です。\n\n今回僕が気に入らなかったのが、footerにある「Subscribe」の文字部分。これを消したい。\n![feeds削除前](https://i.gyazo.com/1c3f3779075834651e9c927a2ea096a4.png)\n\n\n[minima](https://github.com/jekyll/minima)のソースコードを確認し、`/_incledes/footer.html`が気に入らなかった箇所があることを確認した。\n\n\n**自身のリポジトリ**に`/_incledes/footer.html`を作成、今回はオリジナルのfooter.htmlから該当箇所を削除。\n\n以下の画像のような状態になると思います。\n![リポジトリルート](https://i.gyazo.com/aa22c02a8c6b29a6ed66c1d473d6695d.png)\n\nいつも通りGitHubにpush。\n消えたことが確認できました。\n![feed削除後](https://i.gyazo.com/1d8dc36636e96098fa0bff06abe2a31f.png)\n",
            "url": "https://ikmnjrd.github.io/blog/jekyll-footer-override",
            "title": "Jekyllテーマのhtmlオーバーライド",
            "date_modified": "2021-12-22T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/jekyll-theme-on-gh-pages",
            "content_html": "\n* https://github.com/jekyll/minima\n* https://github.com/zivong/jekyll-theme-hydure\n* https://github.com/huangyz0918/moving\n* https://github.com/jekyllt/jasper\n* https://github.com/joshgerdes/jekyll-uno\n",
            "url": "https://ikmnjrd.github.io/blog/jekyll-theme-on-gh-pages",
            "title": "GitHub Pagesでズボラに使えそうなJekyllのブログ用テーマ",
            "date_modified": "2021-10-29T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/jekyll-tipuesearch-adopt",
            "content_html": "\nGithub Pagesで手軽にブログを作成する際に第一候補となるであろうStatic Site Generator「Jekyll」に自作ブログ内検索を手軽に導入する方法について記述します。\n\n![完成イメージ図](https://i.gyazo.com/9f18a04650fb3bfaef972a88a25a00f2.png)\n\n\n### 準備するもの\n- すでに公開設定などを済ませたJekyll製ブログ\n### 手順\n1. 以下に示すソースコード（./assets）をダウンロードします。\n\n[公式GitHubリポジトリ](https://github.com/jekylltools/jekyll-tipue-search)は2017年8月23日より新規コミットがないので、以下に直接zipのリンクを掲載しています。\n[ソースコード(d4b5df7).zip](https://github.com/jekylltools/jekyll-tipue-search/archive/refs/heads/master.zip)\n\n\n\n\n2. 解凍し、自身のブログのソースコードにassetsフォルダの中身を丸ごとコピーします。\n\n![image1](https://i.gyazo.com/e8456b0e9178d920970dcc32c088b62a.png)\n![image2](https://i.gyazo.com/b1c5d6ca798cf6851b5b17db17b09e8e.png)\n\n3. 利用しているテーマでheadタグを規定している部分に以下のソースコードを追記する。\n   - 筆者の環境だと[minima](https://github.com/jekyll/minima)を利用しているので、`_includes/custom-head.html`が本手順の作業対象になります。\n\n[ソース](https://github.com/jekylltools/jekyll-tipue-search)\n\n![image3](https://i.gyazo.com/a75a11a735f7db802a1f1eaccabebad3.png)\n\n4. 以下に示すコードを`search.html`としてコピペし、画像のように配置します。\n   - [minima](https://github.com/jekyll/minima)であれば、統一感を持たせるためにファイル名`search.md`とするのが綺麗な気がするので、私は`search.md`としています。\n\n[ソース](https://github.com/jekylltools/jekyll-tipue-search)\n\n![image4](https://i.gyazo.com/e83c01861fea2707147a8970e8f31784.png)\n\n\n5. あとは`_config.yml`をいじるなりしてヘッダー部分にパーマリンクを設置したり、CSSを少し変えてみたり、ビルド、デプロイをすれば完了です。\n   - よろしければ[筆者の公開リポジトリ](https://github.com/ikmnjrd/ikmnjrd.github.io)を参考にしてみてください。\n\n完成です。\n\n![完成](https://i.gyazo.com/82a80325376d64d4e4560fc0b924881f.png)\n",
            "url": "https://ikmnjrd.github.io/blog/jekyll-tipuesearch-adopt",
            "title": "Jekyll Tipue Searchによる記事検索の導入方法",
            "date_modified": "2022-01-18T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/jest-within-ecma-script",
            "content_html": "\n### 疑問\nJestでECMAScriptを使う方法が[公式](https://jestjs.io/ja/docs/ecmascript-modules)に書いてある。\nやってみたけどなぜかできなかったというメモ。\n\n公式通りにやってみた結果以下のエラー。\n\n### エラー全文\n```bash\n% node --experimental-vm-modules node_modules/jest/bin/jest.js\n(node:92238) ExperimentalWarning: VM Modules is an experimental feature. This feature could change at any time\n(Use `node --trace-warnings ...` to show where the warning was created)\n FAIL  ./index.test.js\n  ● Test suite failed to run\n\n    Jest encountered an unexpected token\n\n    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.\n\n    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.\n\n    By default \"node_modules\" folder is ignored by transformers.\n\n    Here's what you can do:\n     • If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.\n     • If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript\n     • To have some of your \"node_modules\" files transformed, you can specify a custom \"transformIgnorePatterns\" in your config.\n     • If you need a custom transformation specify a \"transform\" option in your config.\n     • If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the \"moduleNameMapper\" config option.\n\n    You'll find more details and examples of these config options in the docs:\n    https://jestjs.io/docs/configuration\n    For information about custom transformations, see:\n    https://jestjs.io/docs/code-transformation\n\n    Details:\n\n    /Users/ike/workspace/no-degradation-image-converter/index.test.js:1\n    ({\"Object.<anonymous>\":function(module,exports,require,__dirname,__filename,jest){import sum from './index';\n                                                                                      ^^^^^^\n\n    SyntaxError: Cannot use import statement outside a module\n\n      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1728:14)\n      at TestScheduler.scheduleTests (node_modules/@jest/core/build/TestScheduler.js:333:13)\n\nTest Suites: 1 failed, 1 total\nTests:       0 total\nSnapshots:   0 total\nTime:        0.222 s\n```\n\n### わからないことを辿る\nそもそも実行時に付与してるオプションは、[Node.js]((https://nodejs.org/api/cli.html#--experimental-vm-modules))のサイトでこのように説明されている。\n>--experimental-vm-module\n>Enable experimental ES Module support in the vm module.\n\nとてもあっさり！\n\n`vm module`とはなんぞ？\n要はV8エンジンらしい。以下公式での[Node.jsのサイト](https://nodejs.org/api/vm.html#vm-executing-javascript)での説明\n>The vm module enables compiling and running code within V8 Virtual Machine contexts. The vm module is not a security mechanism. Do not use it to run untrusted code.\n\nそして迷宮入り。Nodeを16の最新安定版にしてみたけどダメでしたね。\n大人しくCommonJSでrequireします。\n\n\n### 周辺用語\n- Node.js\n- V8\n- VM moduel\n- CommonJS\n- ECMAScript\n\n\n### 参考文献\n- [--experimental-vm-module](https://nodejs.org/api/cli.html#--experimental-vm-modules)\n- [(https://nodejs.org/api/vm.html#vm-executing-javascript)](https://nodejs.org/api/vm.html#vm-executing-javascript)\n- [https://nodejs.org/api/vm.html#vm-executing-javascript](https://nodejs.org/api/vm.html#vm-executing-javascript)\n",
            "url": "https://ikmnjrd.github.io/blog/jest-within-ecma-script",
            "title": "疑問メモ_JestでECMAScriptを使う",
            "date_modified": "2022-01-07T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/licence-seeking",
            "content_html": "\n### どのように書くのがいいのか\nMITやISCなどよく書いてあるがどう書くのがいいのか？\nnpm Docsにはこのように書いてある。\n> BSD-2-Clause や MIT などの一般的なライセンスを使用している場合は、次のように、使用しているライセンスの現在の SPDX ライセンス識別子を追加します。\n> { \"license\" : \"BSD-3-Clause\" }\n> --- [package.json | npm Docs](https://docs.npmjs.com/cli/v6/configuring-npm/package-json#license)\n\n### SPDXとは\nLinux Foundationのブログ（日本語訳版）に怪しい日本語でこのように書いてあります。\n> SPDXは、コンポーネント、ライセンス、著作権、セキュリティ リファレンスなどのソフトウェア部品表 (SBOM) 情報を伝達するためのオープンな標準です\n> --- [SPDX : すでに世界共通のソフトウェア部品表 (SBOM) およびサプライチェーン セキュリティで使用 - The Linux Foundation](https://www.linuxfoundation.jp/blog/2021/06/spdx-its-already-in-use-for-global-software-bill-of-materials-sbom-and-supply-chain-security/)\n\n### ライセンスのリストを参照する\n[SPDX License List](https://spdx.org/licenses/)\nリンク先の表からのIdentifierを探し、次のようにかく。\n```json\n{ \"license\" : \"CC0-1.0\" }\n```\n\nUnlicenseなどもしっかりとSPDXライセンスリストに記載されています。\n\n### 余談\n[https://github.com/jslicense/spdx-license-ids](https://github.com/jslicense/spdx-license-ids)のスター数は2桁なのにUsed byの項目が1千万人近くになってるのはどういうことなのか不思議に思った。\n\n\n\n\n\n\n",
            "url": "https://ikmnjrd.github.io/blog/licence-seeking",
            "title": "package.jsonに記述するlicenceの書き方",
            "summary": "Licenseを書く際の決まりについて調べたのでまとめた。",
            "date_modified": "2022-08-06T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/mac-meeting-transcript",
            "content_html": "\n### 調査\n[Blackhole](https://github.com/ExistentialAudio/BlackHole)や[ladiocast](https://apps.apple.com/jp/app/ladiocast/id411213048)を使って録音した音声を文字起こしする方法がよく紹介されている。\n\nリアルタイムでGoogle Docs上に文字起こしをしたかったが、Blackholeとlaidiocastでは実現できず。\n\n\n### 無料で使えるリアルタイム文字起こしサービス\n* Texta\n* Sloos\n* AI GIJIROKU\n\n\n### 個人的な結論\n普段のメモなどをGoogle Docsで管理しているため、Google Docsをマストとする。\nそのためGoogle MeetやZoomを簡単に録音したい。\n以上の理由から、[Blackhole](https://github.com/ExistentialAudio/BlackHole)と[ladiocast](https://apps.apple.com/jp/app/ladiocast/id411213048)で録音データをGoogle Docsに文字起こしする方式で、\n録音自体を[Krisp](https://krisp.ai/)（ノイズ除去ソフト）で提供されている録音機能を使う。\n\n",
            "url": "https://ikmnjrd.github.io/blog/mac-meeting-transcript",
            "title": "Macでオンライン会議を文字起こし",
            "date_modified": "2022-01-17T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/mac-webserver-easiest",
            "content_html": "\nただの引用メモ\n\n> Mac OS X に最初からインストールされているPythonを利用\n\n```bash\n$ cd ドキュメントルートとなるフォルダ\n$ python -m SimpleHTTPServer 8080\n```\n\n\n### 参考文献\n- [https://qiita.com/massie_g/items/2913066e596dae197539](https://qiita.com/massie_g/items/2913066e596dae197539)\n",
            "url": "https://ikmnjrd.github.io/blog/mac-webserver-easiest",
            "title": "Macでお手軽Webサーバー",
            "date_modified": "2021-12-30T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/markdown-it-process",
            "content_html": "\n失敗したけど、悔しいので調べたことのメモとそのプラグインの[リポジトリ](https://github.com/ikmnjrd/markdown-it-bqcite)\n作ろうとした機能は、`<blockquote/>` 内の特定prefixから始まる箇所を`<cite/>`で囲もうとういうもの。\n\n```md\n> 内容はこれ\n> --- 出典はこれ\n```\nこんなのを\n\n> 内容はこれ\n> <cite>出典はこれ</cite>\n\nこんな風に出力したかった\n\n### markdown-itの処理の大きな流れ\n1. ソース(.md)をToken単位にまずparse。この際、inlineやblockといった固まりで放置されるものがある。\n2. 1.でparseしたものをStringとして出力しながらinlineやblockで放置されたものをそれぞれのルールに従いながらパース。パースしながら出力\n\n\n### 流れ\nMarkdownIt#render(src)\n\nMarkdownIt#parse(src)\n\nstate = new this.core.State(src, this, env);\n// Tokenクラスの読み込み初期化など\n\nthis.core.process(state)\n// coreルールを順にstateを引き回しながら実行\n// stateをToken[]にparse終了\n\n\nMarkdownIt#renderer#renderを実行。token.typeがinlineならRenderer#renderInlineを実行。独自ルールのあるtoken.typeならそのルールを実行。どちらにも当てはまらないならRenderer#renderTokenを実行\n```js\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n```\n\nRenderer#renderInlinの処理例\n\n\nRenderer#renderTokenの処理例\nToken.hiddenなら空文字を返す\n\n\nouTokensに追加?意味わからん\n\n\n\n### テストに使ってた.md\n```md\n> this\n> is\n> test\n> --- in-cite\n\n<!-- >>> second\n--- in-cite -->\n\n\n<!-- >>> aaa\nbbb\nccc -->\n\n> `hoge`\n> hoge\n\n> link in cite\n> --- [link](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n```",
            "url": "https://ikmnjrd.github.io/blog/markdown-it-process",
            "title": "markdown-itのプラグイン開発に失敗したのでメモ",
            "date_modified": "2022-08-07T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/narrative-of-my-criteria-for-tech-selection",
            "content_html": "\n私は2020年12月からWebエンジニアとして働いている小市民です。\n\n## 2022/1\n世の中のフロントエンドプロジェクトではstorybookなるものが使われているらしいな...\nとりあえず神ツールであるReactとWebpackで使ってみるとするか...\n最新のWebpack5だとWebpack4->5からの破壊的変更のせいでstorybookがそのまま使えないだと？！！バッチが配布されているらしいが...\nじゃあWebpackではなく何やら爆速と話題のesbuildは、、、cssをインポートできないというブログがちらほら...？\n\n[公式](https://esbuild.github.io/content-types/#css-from-js)によると、CSSモジュールとしてのインポートはまだできないって書いてある。\n>You can also import CSS from JavaScript. When you do this, esbuild will gather all CSS files referenced from a given entry point and bundle it into a sibling CSS output file next to the JavaScript output file for that JavaScript entry point. So if esbuild generates app.js it would also generate app.css containing all CSS files referenced by app.js. Here's an example of importing a CSS file from JavaScript:\n>```javascript\n>import './button.css'\n>\n>export let Button = ({ text }) =>\n>  <div className=\"button\">{text}</div>\n>```\n>Note that esbuild doesn't yet support CSS modules, so the set of export names from a CSS file is currently always empty. Supporting a basic form of CSS modules is on the roadmap.\n\n\nふーん。とりあえずstorybookとviteをインストールして...ん？\n今webpackって見えたような...webpackいるな...\n\n\n\n```javascript\nwhile (何かいいの見つかればな〜){\n  （...GitHubで「storybook vite」で検索）\n  （...!!...😣）\n}\n```\n\nこの文章はなんの役に立つんですかね？（疑問）\n",
            "url": "https://ikmnjrd.github.io/blog/narrative-of-my-criteria-for-tech-selection",
            "title": "へっぽこエンジニアの技術選定時の頭の中",
            "date_modified": "2022-01-07T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/neumorphism-sample",
            "content_html": "\n## Sandbox\n\n\n<iframe src=\"https://codesandbox.io/embed/beautiful-darwin-4gf3h?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"beautiful-darwin-4gf3h\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n## ポイント\n\n### SVG化した文字に陰影をつける\n\ncssではこのようにすると綺麗に抜ける。\n```css\nsvg {\n  filter: drop-shadow(3px 3px 3px #fff)\n    drop-shadow(-3px -3px 1px rgba(0, 0, 0, 0.15));\n}\n```\nhtml上では、適宜fillやstrokeを設定する。\n\n[https://danmarshall.github.io/google-font-to-svg-path/](https://danmarshall.github.io/google-font-to-svg-path/)（[GitHubリポジトリ](https://github.com/danmarshall/google-font-to-svg-path)）を使って文字を事前にSVG化しておく。\n\nnpmパッケージで似たものを提供している人もいる[https://github.com/shrhdk/text-to-svg](https://github.com/shrhdk/text-to-svg)\n",
            "url": "https://ikmnjrd.github.io/blog/neumorphism-sample",
            "title": "Neumorphismサンプル",
            "date_modified": "2022-02-01T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/next-sitemap-sample",
            "content_html": "エラーに遭遇しました。\n\n### 環境\n- Node: v16.13.2\n- Next.js: 12.0.10\n- globby: 13.1.1\n\n[公式のサンプル集の「with-sitemap」](https://github.com/vercel/next.js/tree/canary/examples/with-sitemap)では以下のようなスクリプトをサーバー実行時に（`next.config.js`のisServerオブションをフラグにして）実行している。\n\n\n./scripts/generate-sitemap.js\n```javascript\nconst fs = require('fs')\nconst globby = require('globby')\n\nfunction addPage(page) {\n  const path = page.replace('pages', '').replace('.js', '').replace('.mdx', '')\n  const route = path === '/index' ? '' : path\n\n  return `  <url>\n    <loc>${`${process.env.WEBSITE_URL}${route}`}</loc>\n    <changefreq>hourly</changefreq>\n  </url>`\n}\n\nasync function generateSitemap() {\n  // Ignore Next.js specific files (e.g., _app.js) and API routes.\n  const pages = await globby([\n    'pages/**/*{.js,.mdx}',\n    '!pages/_*.js',\n    '!pages/api',\n  ])\n  const sitemap = `<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${pages.map(addPage).join('\\n')}\n</urlset>`\n\n  fs.writeFileSync('public/sitemap.xml', sitemap)\n}\n\ngenerateSitemap()\n\n```\n\n\n遭遇したエラーは以下\n\n```bash\nError [ERR_REQUIRE_ESM]: require() of ES Module ./node_modules/globby/index.js from ./scripts/generate-sitemap.js not supported.\nInstead change the require of index.js in ./scripts/generate-sitemap.js to a dynamic import() which is available in all CommonJS modules.\n```\n\n最新のglobbyからはCommonJSが省かれたらしい。\n\n\n### 解決策\npackage.jsonを以下のように書き換え、`$npm i`を実行\n```json\n\"globby\": \"^13.1.1\",\n```\n↓\n```json\n\"globby\": \"^11.0.1\",\n```\n\nインストール後、ビルド時に`./public/sitemap.xml`が無事出力された。\n\n\n### 周辺用語\n- commonJS\n- ESModules\n\n\n### 参考文献\n- [Build a sitemap generator in Next.js - LogRocket Blog](https://blog.logrocket.com/build-sitemap-generator-nextjs/)",
            "url": "https://ikmnjrd.github.io/blog/next-sitemap-sample",
            "title": "Next.jsのサンプル集を参考にサイトマップを作成しようとしたらエラー",
            "date_modified": "2022-02-08T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/node-package-json-keys",
            "content_html": "\n### 楽ができるNodeのバージョン\nNode.js`v17.5~`もしくは`v16`の`--experimental-json-modules`オブションを使えば利用できます。\n\n```js\n/* index.js */\n// An import assertion in a static import\nimport info from `./package.json` assert { type: `json` };\n\n// An import assertion in a dynamic import\nconst { default: info } = await import(\"./package.json\", {\n  assert: {\n    type: \"json\",\n  },\n});\n```\n`v16`でオプション付きで実行する場合は`$ node --experimental-json-modules index.js`と実行します。\nちなみに`--experimental-wasm-modules`というオプションで`wasm`も読み込めます。\n\n### 対象のバージョン以外でやる方法\n1. JSONを読み込み自力でパースする\n```js\nimport { readFile } from 'fs/promises';\nconst json = JSON.parse(\n  await readFile(\n    new URL('./some-file.json', import.meta.url)\n  )\n);\n```\n2. [createRequire](https://nodejs.org/api/module.html#module_module_createrequire_filename)を使う\n```js\nimport { createRequire } from \"module\";\nconst require = createRequire(import.meta.url);\nconst data = require(\"./data.json\");\n```\n\n\n### 参考\n本記事のソースコードおよび内容は以下のリンク先から引用しています。\n- [How to import JSON files in ES modules (Node.js)](https://www.stefanjudis.com/snippets/how-to-import-json-files-in-es-modules-node-js/)\n",
            "url": "https://ikmnjrd.github.io/blog/node-package-json-keys",
            "title": "ESモジュール内でJSONを読み込む方法",
            "summary": "ESモジュール内でJSONを読み込む方法",
            "date_modified": "2022-08-06T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/notion-for-putting-textfile",
            "content_html": "\n### 結論\nNotionにテキストファイルを直接アップロードすると、amazon S3 上にアップロード(&S3へのリンクが生成)され、文字化けしてしまう。（us-west-2リージョンにアップロードされてた）\n\n![文字化けした様子](https://i.gyazo.com/01b1e2fad8348309ba8ce00a0adbdeb1.png)\n\nドラッグ&ドロップでテキストファイルのアップロードをいますぐやめて、サブページ作成後に`Text&Markdown`のインポートをして取り込もう。\n![NotionへImport](https://i.gyazo.com/06904fb5cdea05b0bd13fb572b262bba.png)\n\n\n### 背景\nNotionを使いこなしてるとは言いづらい私ですが、私のNotionの数少ない活躍する機会の一つが、転職活動時に使う[ボードの機能](https://www.notion.so/ja-jp/help/boards)です。\n\n![Notionのボード画像](https://i.gyazo.com/d00cadf7fdca1c09406d615bddef1d9b.png)\n\n\n申し込み、連絡待ち、結果待ちなどのステータスで管理しながら、メモ程度の企業研究や、面談・面接時のメモを書き込んだりしています。\n\nただ、普段はMac標準のテキストエディタで`.txt`や`.md`を書き殴るのが癖になっていました。\n\nこのファイルをそのままNotionにアップロードすると文字化けするので、インポート機能を使ってサブページとして取り込もうねというのが上でも述べた結論。\n\nそれでもNotionの書き味よりも、テキストエディタでマークダウンを書くほうが性に合っているし、急なオンラインミーティングでもサクッと開けるので、Mac標準のテキストエディタはまだしばらく使い続けると思う。\n\n\nそして極個人的な感想として「普段のメモスタイルという支流と、管理ツールという支流が交わったなぁ」という感想を持ちググったらそのまま`合流`という言葉がヒットして謎の感動をしました。\n\n\n> 合流（ごうりゅう、英語：confluence）とは、地理学では二つ以上の水の流れが合わさることをいう。通常、支川がより大きな川に流れ込むことを指す。こうした地点は合流点と呼ばれる。\n> wikipediaより引用\n\nどこぞのソフトウェアは合流の意味だったんですね。\n\n### 参考文献\n- [合流 - wikipedia](https://ja.wikipedia.org/wiki/%E6%B5%81%E8%B7%AF%E5%BD%A2%E7%8A%B6#:~:text=%E5%90%88%E6%B5%81%EF%BC%88%E3%81%94%E3%81%86%E3%82%8A%E3%82%85%E3%81%86%E3%80%81%E8%8B%B1%E8%AA%9E%EF%BC%9A,%E3%81%AF%E5%90%88%E6%B5%81%E7%82%B9%E3%81%A8%E5%91%BC%E3%81%B0%E3%82%8C%E3%82%8B%E3%80%82)",
            "url": "https://ikmnjrd.github.io/blog/notion-for-putting-textfile",
            "title": "Notionにテキストファイルを置くときはサブページとしてインポートしましょう",
            "summary": "個人的なNotionの使い方備忘録です。",
            "date_modified": "2022-02-16T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/notion-image-embed-like-md",
            "content_html": "\n### 結論\n**画像ファイル自体のリンクをNotionに貼り付ける**\n\n![Notion埋め込み例](https://i.gyazo.com/7046c2a8fa7d00ff1cf6feb1503ce36c.png)\n\n### 前提\n私は画像を自身のブログに書くときなどにGyazo（スクリーショットの共有アプリ）を利用しています。\n\n手元のテキストファイル（マークダウンファイル）として残しておく際には、`![hoge](url)`の記法で十分なのですが、Notionアプリ上でこの記法を使ってもそのまま画像を表示してくれません。\n\nGyazoを知らない人向けのイメージ画像。Gyazoを使ってスクリーンショットを撮ると、自動的にGyazoのクラウドサーバー（GCPを利用しているらしい）にアップロードされ、公開される。\n![Gyazo画像](https://i.gyazo.com/34240519a32ac82716681aa70ef518fe.png)\n\n\n### 作業の流れの例\n\nGyazoを利用して取得できるURL例:\nhttps://gyazo.com/34240519a32ac82716681aa70ef518fe\n\n\nGyazoから自動的に与えられるURLをNotionに貼り付け(「Create bookmark」 「Create embed」を選択し)ても画像を綺麗に貼り付けられない。\n![失敗例](https://i.gyazo.com/2f272328bf161c206970d572583f7b50.png)\n↓\n![続・失敗例](https://i.gyazo.com/26e64715a416362727c04054857d25d8.png)\n\nGyazoを使って生成されるリンクは、余分なWebページ情報が多く含まれている。そのためURLを次のようにしてからNotionに貼り付ける。\n加工例（i.と拡張子.pngをつける）:\nhttps://`i.`gyazo.com/34240519a32ac82716681aa70ef518fe`.png`\n\n\nNotionに加工したURLを貼り付けると「Emged image」というオブションが選択できるので、選択すれば画像が埋め込まれる。\n![成功例](https://i.gyazo.com/ef946f57d0800ca06f337425f98ec6fe.png)\n\n\n",
            "url": "https://ikmnjrd.github.io/blog/notion-image-embed-like-md",
            "title": "NotionでMarkdown記法的に画像を埋め込む（w/Gyazo）",
            "date_modified": "2022-01-23T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/novnc-kali-linux",
            "content_html": "[公式](https://www.kali.org/docs/general-use/novnc-kali-in-browser/)にやり方も書いてあるがこの通りだとエラーが出た。\n\n`$ sudo apt install -y x11vnc`\n\n以下の部分をそのまま実行するとエラーが出る。\n$ x11vnc -display :0 -autoport -localhost -nopw -bg -xkb -ncache -ncache_cr-quiet -forever\n```bash\n31/10/2021 20:23:07 passing arg to libvncserver: -ncache_cr-quiet\n31/10/2021 20:23:07 x11vnc version: 0.9.16 lastmod: 2019-01-05  pid: 2173\n31/10/2021 20:23:07 Using X display :0\n31/10/2021 20:23:07 rootwin: 0x764 reswin: 0x3800001 dpy: 0x1dc24970\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 ------------------ USEFUL INFORMATION ------------------\n31/10/2021 20:23:07 X DAMAGE available on display, using it for polling hints.\n31/10/2021 20:23:07   To disable this behavior use: '-noxdamage'\n31/10/2021 20:23:07 \n31/10/2021 20:23:07   Most compositing window managers like 'compiz' or 'beryl'\n31/10/2021 20:23:07   cause X DAMAGE to fail, and so you may not see any screen\n31/10/2021 20:23:07   updates via VNC.  Either disable 'compiz' (recommended) or\n31/10/2021 20:23:07   supply the x11vnc '-noxdamage' command line option.\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 Wireframing: -wireframe mode is in effect for window moves.\n31/10/2021 20:23:07   If this yields undesired behavior (poor response, painting\n31/10/2021 20:23:07   errors, etc) it may be disabled:\n31/10/2021 20:23:07    - use '-nowf' to disable wireframing completely.\n31/10/2021 20:23:07    - use '-nowcr' to disable the Copy Rectangle after the\n31/10/2021 20:23:07      moved window is released in the new position.\n31/10/2021 20:23:07   Also see the -help entry for tuning parameters.\n31/10/2021 20:23:07   You can press 3 Alt_L's (Left \"Alt\" key) in a row to \n31/10/2021 20:23:07   repaint the screen, also see the -fixscreen option for\n31/10/2021 20:23:07   periodic repaints.\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 XFIXES available on display, resetting cursor mode\n31/10/2021 20:23:07   to: '-cursor most'.\n31/10/2021 20:23:07   to disable this behavior use: '-cursor arrow'\n31/10/2021 20:23:07   or '-noxfixes'.\n31/10/2021 20:23:07 using XFIXES for cursor drawing.\n31/10/2021 20:23:07 GrabServer control via XTEST.\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 Scroll Detection: -scrollcopyrect mode is in effect to\n31/10/2021 20:23:07   use RECORD extension to try to detect scrolling windows\n31/10/2021 20:23:07   (induced by either user keystroke or mouse input).\n31/10/2021 20:23:07   If this yields undesired behavior (poor response, painting\n31/10/2021 20:23:07   errors, etc) it may be disabled via: '-noscr'\n31/10/2021 20:23:07   Also see the -help entry for tuning parameters.\n31/10/2021 20:23:07   You can press 3 Alt_L's (Left \"Alt\" key) in a row to \n31/10/2021 20:23:07   repaint the screen, also see the -fixscreen option for\n31/10/2021 20:23:07   periodic repaints.\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 Client Side Caching: -ncache mode is in effect to provide\n31/10/2021 20:23:07   client-side pixel data caching.  This speeds up\n31/10/2021 20:23:07   iconifying/deiconifying windows, moving and raising\n31/10/2021 20:23:07   windows, and reposting menus.  In the simple CopyRect\n31/10/2021 20:23:07   encoding scheme used (no compression) a huge amount\n31/10/2021 20:23:07   of extra memory (20-100MB) is used on both the server and\n31/10/2021 20:23:07   client sides.  This mode works with any VNC viewer.\n31/10/2021 20:23:07   However, in most you can actually see the cached pixel\n31/10/2021 20:23:07   data by scrolling down, so you need to re-adjust its size.\n31/10/2021 20:23:07   See http://www.karlrunge.com/x11vnc/faq.html#faq-client-caching.\n31/10/2021 20:23:07   If this mode yields undesired behavior (poor response,\n31/10/2021 20:23:07   painting errors, etc) it may be disabled via: '-ncache 0'\n31/10/2021 20:23:07   You can press 3 Alt_L's (Left \"Alt\" key) in a row to \n31/10/2021 20:23:07   repaint the screen, also see the -fixscreen option for\n31/10/2021 20:23:07   periodic repaints.\n31/10/2021 20:23:07 X FBPM extension not supported.\n31/10/2021 20:23:07 X display is capable of DPMS.\n31/10/2021 20:23:07 --------------------------------------------------------\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 Default visual ID: 0x21\n31/10/2021 20:23:07 Read initial data from X display into framebuffer.\n31/10/2021 20:23:07 initialize_screen: fb_depth/fb_bpp/fb_Bpl 24/32/7680\n31/10/2021 20:23:07 *** unrecognized option(s) ***\n31/10/2021 20:23:07     [1]  -ncache_cr-quiet\n31/10/2021 20:23:07 For a list of options run: x11vnc -opts\n31/10/2021 20:23:07 or for the full help: x11vnc -help\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 Here is a list of removed or obsolete options:\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 removed: -hints, -nohints\n31/10/2021 20:23:07 removed: -cursorposall\n31/10/2021 20:23:07 removed: -nofilexfer, now the default.\n31/10/2021 20:23:07 \n31/10/2021 20:23:07 renamed: -old_copytile, use -onetile\n31/10/2021 20:23:07 renamed: -mouse,   use -cursor\n31/10/2021 20:23:07 renamed: -mouseX,  use -cursor X\n31/10/2021 20:23:07 renamed: -X,       use -cursor X\n31/10/2021 20:23:07 renamed: -nomouse, use -nocursor\n31/10/2021 20:23:07 renamed: -old_pointer, use -pointer_mode 1\n```\n\nそのため以下のように実行\n$ x11vnc -display :0 -autoport -localhost -nopw -bg -xkb -ncache -forever\n\n\n起動確認\n\n`$ ss -antp | grep vnc`\n\n```bash\nLISTEN    0         32                127.0.0.1:5900            0.0.0.0:*        users:((\"x11vnc\",pid=8056,fd=8))\nLISTEN    0         32                    [::1]:5900               [::]:*        users:((\"x11vnc\",pid=8056,fd=9))\nkali@kali:~$\n```\n\n\n\n\nここでもエラーが出る。\n$ /usr/share/novnc/utils/launch.sh --listen 8081 --vnc localhost\n```bash\nWarning: could not find self.pem\nUsing installed websockify at /usr/bin/websockify\nStarting webserver and WebSockets proxy on port 8081\nUsage: \n    websockify [options] [source_addr:]source_port [target_addr:target_port]\n    websockify [options] [source_addr:]source_port -- WRAP_COMMAND_LINE\n\nwebsockify: error: Error parsing target\nFailed to start WebSockets proxy\n```\n[novnc公式のIssue](https://github.com/novnc/noVNC/issues/1443)でも似た症状が報告されてた。\n\n\n`$ cd ~`\n`$ git clone https://github.com/novnc/noVNC.git`\n`$ cd noVnc/utils/novnc_proxy --vnc localhost:5900`\n\n\n\nサーバー側の別のターミナルでsshを有効にする（？）\n`$ sudo systemctl enable ssh --now`\n\n\nクライアントのターミナルからポートフォワーディング。sshでログインした状態になればOK。\n`ssh kali@192.168.0.140 -L 6080:localhost:6080`\n\n\nクライアントのWebブラウザで以下のようにアクセスする。\nhttp://localhost:6080/vnc.html\n",
            "url": "https://ikmnjrd.github.io/blog/novnc-kali-linux",
            "title": "kali linuxでVNCサーバーにnovncで接続する",
            "date_modified": "2021-10-31T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/prictical-vim-memo",
            "content_html": "本を読んだ時のメモ書きがいつもより出てしまったので。\n\n### これは実践vimを読んだ時のメモです\n\nexpressionレジスタ  \n`<C-r>=` でアクセス  \n1+1の実行結果(2)などが得られる。  \n\n`vit`  \n`<script>DDG.Utils.WebVitals.reportWebVitals(DDG.pixel)</script>`  \n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\nbody>.container {\n    background: none;\n    display: flex;\n    justify-content: space-between;\n    margin: 0 auto;\n    max-width: 1264px;\n    width: 100%;\n}\n\n.container {\n    flex: 1 0 auto;\n    margin: 0 auto;\n    position: relative;\n    text-align: left;\n    width: 100%;\n}\n\n| Left align | Right align | Center align | hoge |\n|:--------|:--------|:--------|:-------|\n| This    | This    | This    | hoge   |\n| column  | column  | column  | hoge   |\n| will    | will    | will    | hoge   |\n| be      | be      | be      | hoge   |\n| left    | right   | center  | hoge   |\n| aligned | aligned | aligned | hoge   |\n\n`q:` コマンドラインウィンドウ\nテキストのように編集ができる。`J`を使って2つのコマンドを1つにまとめるなどができる。  \nプロンプトから切り替えたい時は`<C-f>`で切り替えられる。  \n\n`%`は現在編集中のファイル名のエイリアス  \nバッファ内だと対となる対象へのジャンプ(モーション)  \nプロンプトの`:%s`はsubstituteコマンドじゃなかった？？  \n\n`:sh[ell]`コマンドが何故か使えず、`:terminal`コマンドなら使えた。  \n\n`<C-z>`実行中のvimをバックグラウンドにする。zshではfgコマンドでvimに戻ってこれる。  \n\n`read !{cmd}`コマンド実行結果をvim内に挿入できる  \n\n`q{register}`マクロ記録開始 => `q` マクロ記録停止  \n`@{register}` マクロ実行  \n`@@` 前回実行のマクロを実行  \n`:reg {register}` マクロ確認  \n\n`q/` コマンドライン履歴を表示する  \nノーマルモードの時の`*`でカーソル位置の単語(?)の検索  \n\n`C-w`s 水平分割  \n`C-w`v 垂直分割  \n\n### 置換コマンド\n\n:[range]s[ubstitute]/{pattern}/{string}/[flags]\n\nsコマンドのgフラグは現在行の意味でグローバルでしかない。  \nファイル全体を変更するならsコマンドの前に`%`をつける  \n\nレジスタの参照し  \n`:%s//\\=@0/g` 直前の検索パターンをヤンクレジスタの内容で置き換える  \n\n`g&` = `:%s//~/&`  \n\n### ファイルの補完\n\n`i_<C-x><C-f>`  \nworkspace/liff-firebase/liff-app/functions/node_modules/\n\n### コンフィグ\n\n`:set spell` => `:set nospell`  \n`:set spell!` 設定値をトグル  \n`:set spell?` 現在の設定値を見る  \n`:set spell&` 設定値をデフォルト値にする  \n\n`:setloacal tabstop=4` 現在のウィンドウとバッファに適用  \n`:bufdo setloacal tabstop=4` 既存のバッファに適用  \n`:windo setloacal tabstop=4` 全てのウィンドウに適用  \n",
            "url": "https://ikmnjrd.github.io/blog/prictical-vim-memo",
            "title": "実践Vimを読んだ時のメモ",
            "summary": "ただのメモ",
            "date_modified": "2022-08-25T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/prsim-codeblock-support",
            "content_html": "\n### PrismJSでサポートされている言語を抜粋\n`language-xxxx`の`xxxx`部分に当てはめればいいのがformatに書いてるやつ。\n\n使う機会がありそうで忘れがちなやつをまとめた。jsstacktraceなんてよく使う機会あるはずなのに存在を知らなかった.\n基本的には拡張子を指定すればいける。\n\n\n| lang | format |\n|:-----------|:------------|\n| CSV| csv|\n| Docker| docker|\n| JSON5| json5|\n| JSONP| jsonp|\n| JS stack trace| jsstacktrace|\n| JS Templates| js-templates|\n| JS Extras| js-extras|\n| Markdown| md|\n| React TSX| tsx|\n| React JSX| jsx|\n| JSDoc| jsdoc|\n| GraphQl| graphql|\n| Go module| go-mod|\n| Git| git|\n| ignore| ignore, gitignore, hgignore, npmignore|\n| Log file| log|\n| SQL| sql|\n\n### その他感想\nnginxやapplescriptなどもサポートされてるみたいで懐が深い。\n\n### 参考文献\n- [prism - Supported Laungages](https://prismjs.com/#supported-languages)",
            "url": "https://ikmnjrd.github.io/blog/prsim-codeblock-support",
            "title": "忘れがちなPrismJSがサポートしている言語",
            "summary": "PrismJSでサポートされている",
            "date_modified": "2022-07-24T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/push-and-test-with-github-actions",
            "content_html": "\n## 手順\n\nワークフローの設定（コード管理できるもの）とGitHubのUI上から設定するものに分けて考える\n\n### ワークフローの設定\n\n例として貼り付けますが、[ここ](https://docs.github.com/ja/actions/examples/using-scripts-to-test-your-code-on-a-runner)を参考にするなど自分の環境に合わせカスタマイズしてください。\n\n```yaml\nname: exec-tests\non:\n  push:\n\njobs:\n  status-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ inputs.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n\n      - name: Get Cache Dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Create avif images dir\n        run: mkdir tmp\n\n      - name: Build\n        run: npm run build\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n\n      - name: Check by linter\n        run: npm run lint\n\n      - name: Check by TypeScript Compiler\n        run: npm run typecheck\n\n      - name: Run Tests\n        run: npm run test\n\n```\n\n### リポジトリ(Web上から)の設定\n\n以下の画面から編集\n![create-protection](https://i.gyazo.com/b5ca6098ced1849a751945e9e45d2c62.png)\nmainブランチの保護をするため、「main」と入力。  \n「Require status checks to pass before merging」にチェックを入れ、検索窓から「status-check」を入力、選択。  \n![入力例1](https://i.gyazo.com/7e5c454ddc160cff2b14487e48a12504.png)\n\nここまで設定できると、以下のような画面で表示できる。\n![動作例1](https://i.gyazo.com/ccf3105509cc3d866b5cc6ca9cf26524.png)\n\nこの設定だと警告が出るがマージはぽちぽちとクリックすればできてしまうので、「Do not allow bypassing the above settings」の設定もしておく。\n![設定例2](https://i.gyazo.com/31b6721b6b8636087028d71c1f906445.png)\n\nこれでマージするにはコードの変更を余儀なくされる。\n![動作例2](https://i.gyazo.com/bf39f63f875bc6ca659adbaca36bc357.png)\n\n## 余談\n\n### 意図通りいかなかったこと\n\n`npm ci --ignore-scripts`コマンドを使って依存関係のインストールが爆速になるかと思ったら、ビルド時に画像フォーマットの変換に使っているsharpを対象に以下のエラーが出た。\n\n> Error:  \n> Something went wrong installing the \"sharp\" module\n> Cannot find module '../build/Release/sharp-linux-x64.node'\n> Require stack:\n>   /home/runner/work/ikmnjrd.github.io/ikmnjrd.github.io/node_modules/sharp/lib/sharp.js\n\nそのため、`$ npm ci`とした。\n\n### 参考文献\n\n- [スクリプトを使ってランナーでコードをテストする - GitHub Docs](https://docs.github.com/ja/actions/examples/using-scripts-to-test-your-code-on-a-runner)\n",
            "url": "https://ikmnjrd.github.io/blog/push-and-test-with-github-actions",
            "title": "GitHubにpushした時に特定コマンドの実行結果でマージ可否の設定",
            "summary": "GitHubでpushした時にマージ可否を設定する",
            "date_modified": "2022-09-11T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/react-webpack-skelton",
            "content_html": "\n## リポジトリ\nhttps://github.com/ikmnjrd/react-webpack-skelton\n\n## 手順\n`# npm init -y`\n\n`# npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader`\n\npackage.jsonに追記\n```json\n\"build\": \"webpack\",\n\"watch\": \"webpack -w\",\n\"start\": \"webpack serve\"\n```\n\n`# npm i -S react react-dom react-router-dom @types/react @types/react-dom @types/react-router-dom`\n\ntsconfig.json作成\n```json5\n{\n  \"compilerOptions\": {\n    \"sourceMap\": true,\n    // TSはECMAScript 5に変換\n    \"target\": \"ES5\",\n    // TSのモジュールはES Modulesとして出力\n    \"module\": \"ES2015\",\n    // JSXの書式を有効に設定\n    \"jsx\": \"react\",\n    \"moduleResolution\": \"node\",\n    \"lib\": [\n      \"ES2020\",\n      \"DOM\"\n    ]\n  }\n}\n```\n\n`webpack.config.js` を作成\n```js\nmodule.exports = {\n  // モード値を production に設定すると最適化された状態で、\n  // development に設定するとソースマップ有効でJSファイルが出力される\n  mode: \"development\",\n\n  // メインとなるJavaScriptファイル（エントリーポイント）\n  entry: \"./src/main.tsx\",\n  // ファイルの出力設定\n  output: {\n    //  出力ファイルのディレクトリ名\n    path: `${__dirname}/dist`,\n    // 出力ファイル名\n    filename: \"main.js\"\n  },\n  module: {\n    rules: [\n      {\n        // 拡張子 .ts もしくは .tsx の場合\n        test: /\\.tsx?$/,\n        // TypeScript をコンパイルする\n        use: \"ts-loader\"\n      }\n    ]\n  },\n  // import 文で .ts や .tsx ファイルを解決するため\n  resolve: {\n    extensions: [\".ts\", \".tsx\", \".js\", \".json\"]\n  },\n  // ES5(IE11等)向けの指定（webpack 5以上で必要）\n  target: [\"web\", \"es5\"],\n\n\t// ローカルサーバー（webpack-dev-server）\n  devServer: {\n\t\tcontentBase: `${__dirname}/dist`,\n    hotOnly: true,\n    port: 8080,\n    host: '0.0.0.0',\n  }\n};\n```\n\n`/src` 配下に  `main.tsx` を作成\n```jsx\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nconst App = () => {\n  return (\n      <div>\n        <h1>Hello React!</h1>\n      </div>\n  );\n}\n\nReactDOM.render(<App/>, document.querySelector('#app'));\n```\n\n\n\n`/dist` にindex.htmlを作成\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>my-app</title>\n  </head>\n  <body>\n    <div id=\"app\"></div>\n    <script src=\"main.js\"></script>\n  </body>\n</html>\n```\n\n\nhttps://ics.media/entry/16329/\n\nhttps://newcss.net/\n",
            "url": "https://ikmnjrd.github.io/blog/react-webpack-skelton",
            "title": "reactスケルトン的な",
            "date_modified": "2020-03-01T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/run-aliases-commands-inside-vim",
            "content_html": "\n### 結論\n`.zshenv`ならvim起動時にも読み込まれるので、エイリアスは`.zshenv`に記述する。\n`.config/nvim/init.nvim` に以下を記述\n```vim\nset shell=zsh\n```\n\n### 余談\nブログを書くときに\"yyyy-mm-dd\"という形でいつも日付を書いていた。  \nその時にvimから`date \"+%Y-%m-%d\"`と実行・挿入したかった。  \n毎回オプションを書くぐらいならalias(名前day)として登録したが、`:r! day`で挿入されなかった.  (エラー内容: シェルが値を返しました 127)  \n\n\n### 参考文献\n- [terminal vim not loading .zshrc](https://stackoverflow.com/questions/11415428/terminal-vim-not-loading-zshrc)\n",
            "url": "https://ikmnjrd.github.io/blog/run-aliases-commands-inside-vim",
            "title": "vim内部(:r!)からエイリアスコマンドを利用する",
            "summary": "vim(nvim)からエイリアスコマンドを利用する",
            "date_modified": "2022-08-18T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/ssh-keygen",
            "content_html": "### 手順\n`$ ssh-keygen -t ed25519`  \n鍵の名前の入力を求められるので`github`や`hoge`などサービス名を入れておく。  \nパスフレーズ（パスワード）はナシ。自分しか使わないマシン上で使う鍵なので。もしマシンの管理者が自分以外ならしっかり設定しておく。\n\n`$HOME/.ssh`内にssh-keygenで入力した名前(`hoge`)の秘密鍵と`hoge.pub`の公開鍵ができている\n`$ pbcopy < ~/.ssh/hoge.pub`  \n\n### github\n```\n$ ssh -T github\nHi ikmnjrd! You've successfully authenticated, but GitHub does not provide shell access.\n```\n認証は通ってるがいざcloneをしようとしたら `Permission denied (publickey).` のエラー。\n```\n$ ssh -vT git@github.com\n```\nよくわからなかったが類似エラーを適当に検索したら~/.ssh/configのHostの値が原因っぽかった。\n```\n====変更前\nHost github\n====変更後\nHost github github.com\n```\n無事cloneできた。\n\n### 周辺用語\n- RSA\n- Ed25519\n- 楕円曲線暗号\n- エドワーズ曲線デジタル署名アルゴリズム\n\n\n### 参考文献\n- [SSH認証に最強の「Ed25519鍵」を使おう | LFI](https://linuxfan.info/ssh-ed25519)\n- [SSH 鍵 - ArchWiki](https://wiki.archlinux.jp/index.php/SSH_%E9%8D%B5)\n- [git clone したら、Permission denied (publickey).のエラー - Qiita](https://qiita.com/hatorijobs/items/92d8df363020a7f6d9fb)",
            "url": "https://ikmnjrd.github.io/blog/ssh-keygen",
            "title": "自分のsshキーの作り方メモ",
            "summary": "僕の疑問に追記する形で更新しています。",
            "date_modified": "2022-07-14T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/story-book-builder-vite",
            "content_html": "\n\n使ってみたら使用感的にとてもよかった。\nただ、\n[Getting started with React, Vite and Storybook (on a new project)]((https://github.com/eirslett/storybook-builder-vite#getting-started-with-react-vite-and-storybook-on-a-new-project))の中で紹介されていた`@vitejs/app`がdeprecatedだったので、修正したものを紹介する。\n\n```bash\nnpm init vite@latest vite-react-app -- --template react-ts && cd vite-react-app\nnpm install # or yarn\nnpx sb@next init --builder storybook-builder-vite && npm run storybook\n```\n\n\n\n関係ないが、[viteの公式テンプレート集](https://github.com/vitejs/awesome-vite#templates)などもあるのでこれから参考にバイトライフをEnjoyしようと思います\n\n\n### 参考\n- [https://github.com/eirslett/storybook-builder-vite#getting-started-with-react-vite-and-storybook-on-a-new-project](https://github.com/eirslett/storybook-builder-vite#getting-started-with-react-vite-and-storybook-on-a-new-project)\n- [https://vitejs.dev/guide/#scaffolding-your-first-vite-project](https://vitejs.dev/guide/#scaffolding-your-first-vite-project)\n- [https://github.com/vitejs/awesome-vite#templates](https://github.com/vitejs/awesome-vite#templates)\n",
            "url": "https://ikmnjrd.github.io/blog/story-book-builder-vite",
            "title": "storybook-builder-viteを使ってみる",
            "date_modified": "2022-01-09T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/summary-of-howto-receive-photos-data",
            "content_html": "\n\n#### [証明写真ボックス](https://www.fujifilm.com/jp/ja/consumer/photoprinting/photo-box)\nおすすめ。富士フィルムがやっている証明写真機。\n\n写真機の中に入ると、「データと写真」「データのみ」「写真のみ」などから選択できる。値段は少しずつ違い、「データと写真」が1000円、「データのみ」が800円だったはず。\n\n会員登録や専用アプリのダウンロードなどの必要がない。\n撮影後に発行される受付番号とパスワードで半年間ダウンロード可。\n\n\n#### [証明写真機Ki-Re-i](https://www.dnpphoto.jp/products/kirei/with/)\n\n専用アプリのダウンロードが必要.\n「証明写真機Ki-Re-i Withスマホ」という機種でないとデータでの受け取りに対応してなくてややこしい。\n\n\n#### 地元の写真屋\n地元の写真屋を今まで使ってた。\n自分の顔がひん曲がってるせいで、もう少し顔傾けてなどの指示がよく出て面倒くさい。\nカメラマンの腕次第で写真の出来が変わる。\n\n値段は1500円くらいで高い。\nCD-ROMに焼いてくれるが処分に困る。\n",
            "url": "https://ikmnjrd.github.io/blog/summary-of-howto-receive-photos-data",
            "title": "履歴書用の写真をデータで受け取る方法まとめ",
            "date_modified": "2022-01-31T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/svg-icon-distributing-sites",
            "content_html": "\n## **SVGとは**\nScalable Vector Graphics\n\n### SVGの網羅的な説明\n[https://www.webdesignleaves.com/pr/html/svg_basic.html](https://www.webdesignleaves.com/pr/html/svg_basic.html)\n\n### SVGのベストプラクティス的な説明\n[https://design.dena.com/engineering/svg-sprite](https://design.dena.com/engineering/svg-sprite)\n\n## **便利な素材**\n- [https://devicon.dev/](https://devicon.dev/)\n  - MITライセンス\n- [https://svgporn.com/](https://svgporn.com/)\n  - CC0 1.0 Universal\n- [https://fonts.google.com/icons?selected=Material+Icons](https://fonts.google.com/icons?selected=Material+Icons)\n  - APACHE LICENSE, VERSION 2.0\n",
            "url": "https://ikmnjrd.github.io/blog/svg-icon-distributing-sites",
            "title": "SVGアイコンを配布しているWebサイト",
            "date_modified": "2022-01-11T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/swagger-ui-local-zubora",
            "content_html": "### きっかけと対象読者\nSwaggerことOpenAPI(以下、OAS)でドキュメントが書かれているが、特にそれが利用されているわけでもないプロジェクトに入ったばかりの頃（執筆している今）。\nフロントエンドを中心に新規実装を担当していたが、APIの完成待ちの部分が多く、フロント・バックエンドともに未着手のAPI仕様を作る仕事が回ってきた。\n手書きしてもいいが、どうせだったらOASの便利ツールにも手を出してみたくなったによるズボラ記事。\n似た境遇じゃなきゃ以下の手順は参考にならないと思う。\n\n### 手順\n#### swagger-ui側\n勝手にプロジェクトのリポジトリにインストールしたくないので、[git clone](https://github.com/swagger-api/swagger-ui)して使う。\n`$ git clone git@github.com:swagger-api/swagger-ui.git && cd swagger-ui`\n`$ cd swagger-ui`\n`$ npm run dev`\n\nlocalhost:3200でswagger-uiが起動するので開く\n\n#### OASドキュメント側\n`$ npm install -g http-server`\n`$ cd {your-oas-document-dir}`\n`$ http-server --cors`\n\nlocalhost:8080でサーバー起動\n\n![画面例](https://i.gyazo.com/5c53a9d6be78fafb5f4fda86a8d7d981.png)\n\nテキストボックスに`http://localhost:8080/your-oas.json`などと入れてExploreボタンを押す。\n\n### その他\nswagger-ui起動時にはデフォルトで `https://petstore.swagger.io/v2/swagger.json`に接続される。\n\n`swagger-ui/dev-helpers/dev-helper-initializer.js`に設定があったりするので、いじれる。ここらへんはしっかりと公式ドキュメントに書かれているのでぜひ見てみてください。\n```javascript\n// Build a system\n  const ui = SwaggerUIBundle({\n    url: \"your-oas-file\",\n    dom_id: \"#swagger-ui\",\n    presets: [\n      SwaggerUIBundle.presets.apis,\n      SwaggerUIStandalonePreset\n    ],\n    plugins: [\n      SwaggerUIBundle.plugins.DownloadUrl\n    ],\n    // requestSnippetsEnabled: true,\n    layout: \"StandaloneLayout\"\n  })\n```\n\n### 参考文献\n- [how to load local .json file? · Issue #1110 · swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui/issues/1110#issuecomment-155873088)\n- [治安のいいOpenAPIの開発環境を作る](https://tech.buysell-technologies.com/entry/2021/09/21/095238)\n- [npm - swagger-ui](https://www.npmjs.com/package/swagger-ui)\n- [swagger-ui/setting-up.md at master · swagger-api/swagger-ui](https://github.com/swagger-api/swagger-ui/blob/master/docs/development/setting-up.md)",
            "url": "https://ikmnjrd.github.io/blog/swagger-ui-local-zubora",
            "title": "ズボラにローカルでswagger-uiを使う",
            "summary": "ズボラにローカルでswagger-uiを使う",
            "date_modified": "2022-05-10T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/ts-jest-fail-because-import-global-jset",
            "content_html": "### 結論\nts-jest?esmで書いてるから？とりあえずでimportするのやめよう。\n\n### 状況\nJestの右も左もわからないがfetcをmockしてゴニョゴニョしていた。  \n[公式の例](https://jestjs.io/docs/mock-function-api/#jestmockedsource)にもnode-fetchを使った例が載ってるぐらいなので、コピペして動かそうとしていたら問題発生。\n\n\n以下のエラーが発生した。\n```jsstacktrace\nTypeError: mockGetImageFromWeb.mockClear is not a function\n  23 |\n  24 |   afterEach(() => {\n> 25 |     mockGetImageFromWeb.mockClear()\n     |                         ^\n  26 |   })\n  27 |   test('should be defined', () => {\n  28 |     expect(getImageFromWeb).toBeDefined()\n```\n\nコピペしたコードはこれ\n```js\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\n\n### 対応\nコピペしてきたtestファイルで以下のインポート文を削除したら動いた。\n```js\nimport { expect, jest, test } from '@jest/globals'\n```\n\n### 参考文献\n- [Mock Functions · Jest](https://jestjs.io/docs/mock-function-api/#jestmockedsource)\n- [How To Mock Fetch in Jest | Leigh Halliday](https://www.leighhalliday.com/mock-fetch-jest)\n\n\n",
            "url": "https://ikmnjrd.github.io/blog/ts-jest-fail-because-import-global-jset",
            "title": "Jest(ts-jest)で作ったはずのmockがundefinedになるエラー",
            "summary": "Jestで遭遇したエラー",
            "date_modified": "2022-09-19T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/typescript-compile",
            "content_html": "\n### 疑問\ntypescriptをjavascriptを挟まずにネイティブコードにコンパイルするようなプロジェクトはないのか？\n\n### 自分なりの回答\nないよ。\n\nDenoがTypeScriptコードをサポートしているが、中ではコンパイラが一度JavaScriptに変換している。\n\nマイクロソフトがTypeScriptコンパイラAPIをwikiにしてくれている。\n[https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API](https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API)",
            "url": "https://ikmnjrd.github.io/blog/typescript-compile",
            "title": "TypeScriptをネイティブコンパイルするって？",
            "summary": "僕の疑問に追記する形で更新しています。",
            "date_modified": "2021-12-26T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/useful-tips-2022-1",
            "content_html": "\n### 著者近況\n転職を経てシステム開発会社に入社して2ヶ月。知らないことばかりが頭上を飛び交うドタバタの中、合間を縫って引っ越しをした。少し新しい生活に慣れ始めた今日この頃。久々に自分の興味を昇華しようとGitHubで他人のdotfilesを覗いたりしている。なお当人はMacのデフォルトのterminalを使い続け、特に設定にこだわろうとしたことすらなかったところ。\n\n## Tips\n\n### Webブラウザを簡易的なメモ帳として使う\nアドレスバーに以下を入力しEnter\n`data:text/html, <html contenteditable>`\n\nhtmlなのでstyleの指定やscriptタグも読み込める。\n`data:text/html, <html contenteditable style=\"font-style: italic;\">`\n\n### Zsh\n#### historyの検索\n`control + r` でhistoryからの検索&実行ができる\n\n#### cd系\npushdとpopdとこれらを使うのに便利な設定\n```shell\n# This is in ~/.zshrc\nsetopt auto_pushd\nsetopt pushd_ignore_dups\n```\n\n#### history系\n```shell\n# This is in ~/.zshrc\nsetopt hist_ignore_dups\nsetopt share_history\nsetopt inc_append_history\n```\n\n#### Zshのオプションの一覧(Web）はここ\n[https://zsh.sourceforge.io/Doc/Release/Options-Index.html](https://zsh.sourceforge.io/Doc/Release/Options-Index.html)\n\n\n### Mac標準TerminalとiTerm2\n使ってて一番違うのが\"色\"という自分なりの結論。\n[pastel](https://github.com/sharkdp/pastel)をbrew installして使ってみるのが体感しやすかった。\n今まで標準のTerminalを使っていたが、nvimを試している中でiTerm2に乗り換えることにした。\n\n\n### 周辺用語\n- true color \n- 16bit color \n- 24bit color\n\n### 参考文献\n- [ブラウザのタブがメモ帳になる技が便利　とっさに何かメモりたいときなどに](https://nlab.itmedia.co.jp/nl/articles/2207/06/news129.html)\n- [現役シリコンバレーエンジニアが教える NeoVim(VIM) + Tmux + Zsh 入門](https://www.udemy.com/course/vim-tmux-zsh/)",
            "url": "https://ikmnjrd.github.io/blog/useful-tips-2022-1",
            "title": "最近知ったTips",
            "summary": "2022年度に知ったTipsまとめその1",
            "date_modified": "2022-07-09T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/v8engine-asm-show",
            "content_html": "\nアセンブリを読みたい願望がある。\nnodeでもV8エンジンの`--print-code`オプションが使える。\n```bash\n$ node --print-code sample.js\n$ d8 --print-code sample.js\n```\n\n実際に出力してみたけど、自分で書いたコード部分すら見つからず、わけわからんかった。\n（Raw Codeとして出力されると紹介されていたが、見当たらなかった。）\n\n\n### 参考\n- [v8でjsとwasmのアセンブリを取る方法](https://zenn.dev/umashiba/articles/d64fb62a09fb4f)\n- [GitHubの公式ミラーリポジトリ](https://github.com/v8/v8)\n- [公式Gitリポジトリ](https://chromium.googlesource.com/v8/v8.git)\n- [https://v8.dev/docs](https://v8.dev/docs)\n",
            "url": "https://ikmnjrd.github.io/blog/v8engine-asm-show",
            "title": "V8エンジン（JavaScript）が吐くアセンブリを見たい！",
            "date_modified": "2022-01-09T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/vim-redo-undo-list",
            "content_html": "\n\n### 繰り返しが可能な操作と対になる操作\n\n| 実施項目 | 操作 | 繰り返す| 戻る| 戻るの取り消し(進む) |\n|:-----------|:------------|:------------|:------------|:------------|\n|変更する | {edit} | . | u | `<C-r>` |\n|行内で文字を前方検索|f{char}/t{char}|;|,||\n|行内で文字を後方検索|F{char}/T{char}|;|,||\n|ドキュメント内で文字を前方検索|/pattern`<CR>`|n|N||\n|ドキュメント内で文字を後方検索|?pattern`<CR>`|n|N||\n|置換の実行|:s/target/replacement|&|u||\n|一連の変更を実行|qx{changes}q|@x|u||\n\n\n### 参考文献\n- [実践Vim 思考のスピードで編集しよう!](https://www.amazon.co.jp/%E5%AE%9F%E8%B7%B5Vim-%E6%80%9D%E8%80%83%E3%81%AE%E3%82%B9%E3%83%94%E3%83%BC%E3%83%89%E3%81%A7%E7%B7%A8%E9%9B%86%E3%81%97%E3%82%88%E3%81%86-Drew-Neil/dp/4048916599)\n",
            "url": "https://ikmnjrd.github.io/blog/vim-redo-undo-list",
            "title": "vimで繰り返しの操作とその対となる操作",
            "summary": "vimで繰り返しの操作とその対となる操作",
            "date_modified": "2022-08-20T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/vim-tmux-reference",
            "content_html": "\n## 参考サイトまとめ\n### vim関連\n- [how-to-yank-from-vim-to-system-clipboard](https://vi.stackexchange.com/questions/23130/how-to-yank-from-vim-to-system-clipboard)\n- [How to Undo Changes in Vim / Vi](https://phoenixnap.com/kb/vim-undo-redo)\n- [Neovimでのフロントエンド開発環境 2021](https://zenn.dev/yano/articles/vim_frontend_development_2021)\n- [新人達を1ヶ月でガチvimmerにした方法](https://qiita.com/nyantera/items/4bf29ca6f11bc797a9cb)\n\n### tmux関連\n- [とほほのtmux入門](https://www.tohoho-web.com/ex/tmux.html)\n- [tmuxで快適にpane移動](https://qiita.com/pocari/items/b1828c8aea8e3545cadd)\n",
            "url": "https://ikmnjrd.github.io/blog/vim-tmux-reference",
            "title": "vim/tmuxを使うに当たって参考にしたサイトまとめ",
            "summary": "vimとtmuxを使うに当たって参考にしたサイトまとめ",
            "date_modified": "2022-08-20T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/wasm-and-v8engine",
            "content_html": "\n### 疑問\nWebブラウザではV8エンジンがJavaScriptを解釈・実行するのはわかったが、JavaScriptに埋め込まれたwasm（別言語・npm）で提供されている場合もV8エンジンが同一スレッド内でwasmを解釈・実行するの？\nV8がhidden classを作成して、、、\n\n### 参考文献\n- [https://postd.cc/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code/](https://postd.cc/how-javascript-works-inside-the-v8-engine-5-tips-on-how-to-write-optimized-code/)\n",
            "url": "https://ikmnjrd.github.io/blog/wasm-and-v8engine",
            "title": "疑問メモ_WASMとV8エンジン",
            "date_modified": "2021-12-26T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/webpack-buffer-on-nodejs",
            "content_html": "\n駆け出しエンジニアのふわっとした理解を書く。\nNode.jsのコアモジュールであるBuffer()をフロント側で使いたいときがあるらしい。[参考の該当箇所](https://github.com/CyberAgentHack/web-speed-hackathon-2021/blob/135468cc9f69f6f27ba0bc9d3b74d60f1ebe3a40/client/src/components/foundation/CoveredImage/CoveredImage.jsx#L21-L23)（パフォーマンスチューニングを行う元して書かれたソースコードなので、ベストプラクティス的ではないのかもしれないが、初心者の私には判断つきません）\n```javascript\nconst imageSize = React.useMemo(() => {\n  return data !== null ? sizeOf(Buffer.from(data)) : null;\n}, [data]);\n```\n\n\n### 解決策\n解決策(といっても、元々のソースコードに書かれていたが)、下に記載する設定がないとブラウザから怒られてしまいます。\n```bash\nCoveredImage.jsx:22 Uncaught ReferenceError: Buffer is not defined\n```\n\n\n`webpack.config.js` に以下のように追記する。\n```javascript\nplugins: [\n    new webpack.ProvidePlugin({\n      Buffer: ['buffer', 'Buffer'],\n    }),\n]\n```\n\n\n\n### 参考文献\n- [https://github.com/diegomura/react-pdf/issues/1029](https://github.com/diegomura/react-pdf/issues/1029)\n- [https://github.com/CyberAgentHack/web-speed-hackathon-2021](https://github.com/CyberAgentHack/web-speed-hackathon-2021)\n- [https://webpack.js.org/plugins/provide-plugin/](https://webpack.js.org/plugins/provide-plugin/)\n",
            "url": "https://ikmnjrd.github.io/blog/webpack-buffer-on-nodejs",
            "title": "WebpackでBuffer（Node.js）を使う",
            "date_modified": "2022-01-02T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        },
        {
            "id": "https://ikmnjrd.github.io/blog/what-csp-hash-directive",
            "content_html": "### 疑問に遭遇した状況\nネットサーフィンをしていて`<head/>`を覗いていた\n\n### 疑問\ncsp-hashディレクティブって何？なんのために使うの？\n\nどうもcspは Content-Security-Policy の略っぽい。\n```html\n<script csp-hash>\n  if (/Mac OS X/.test(navigator.userAgent))document.documentElement.classList.add('apple')\n</script>\n```\n\nこのブログがわかりやすかった気がしたが、わからなかった。[CSP(コンテンツセキュリティポリシー)について調べてみた - SSTエンジニアブログ](https://techblog.securesky-tech.com/entry/2020/05/21/)\n\n\n### 参考文献\n- [patterns.dev](https://www.patterns.dev/)\n- [CSP(コンテンツセキュリティポリシー)について調べてみた - SSTエンジニアブログ](https://techblog.securesky-tech.com/entry/2020/05/21/)\n",
            "url": "https://ikmnjrd.github.io/blog/what-csp-hash-directive",
            "title": "疑問メモ_scriptタグのcsp-hashディレクティブについて",
            "date_modified": "2022-01-19T00:00:00.000Z",
            "author": {
                "name": "ike",
                "url": "https://twitter.com/ikmnjrd"
            }
        }
    ]
}