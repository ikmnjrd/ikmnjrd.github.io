{"pageProps":{"tag":"CI/CD","posts":[{"slug":"push-and-test-with-github-actions","frontmatter":{"title":"GitHubにpushした時に特定コマンドの実行結果でマージ可否の設定","description":"GitHubでpushした時にマージ可否を設定する","date":"2022-09-11","tag":["GitHub","CI/CD"]},"content":"\n## 手順\n\nワークフローの設定（コード管理できるもの）とGitHubのUI上から設定するものに分けて考える\n\n### ワークフローの設定\n\n例として貼り付けますが、[ここ](https://docs.github.com/ja/actions/examples/using-scripts-to-test-your-code-on-a-runner)を参考にするなど自分の環境に合わせカスタマイズしてください。\n\n```yaml\nname: exec-tests\non:\n  push:\n\njobs:\n  status-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ inputs.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n\n      - name: Get Cache Dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Create avif images dir\n        run: mkdir tmp\n\n      - name: Build\n        run: npm run build\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n\n      - name: Check by linter\n        run: npm run lint\n\n      - name: Check by TypeScript Compiler\n        run: npm run typecheck\n\n      - name: Run Tests\n        run: npm run test\n\n```\n\n### リポジトリ(Web上から)の設定\n\n以下の画面から編集\n![create-protection](https://i.gyazo.com/b5ca6098ced1849a751945e9e45d2c62.png)\nmainブランチの保護をするため、「main」と入力。  \n「Require status checks to pass before merging」にチェックを入れ、検索窓から「status-check」を入力、選択。  \n![入力例1](https://i.gyazo.com/7e5c454ddc160cff2b14487e48a12504.png)\n\nここまで設定できると、以下のような画面で表示できる。\n![動作例1](https://i.gyazo.com/ccf3105509cc3d866b5cc6ca9cf26524.png)\n\nこの設定だと警告が出るがマージはぽちぽちとクリックすればできてしまうので、「Do not allow bypassing the above settings」の設定もしておく。\n![設定例2](https://i.gyazo.com/31b6721b6b8636087028d71c1f906445.png)\n\nこれでマージするにはコードの変更を余儀なくされる。\n![動作例2](https://i.gyazo.com/bf39f63f875bc6ca659adbaca36bc357.png)\n\n## 余談\n\n### 意図通りいかなかったこと\n\n`npm ci --ignore-scripts`コマンドを使って依存関係のインストールが爆速になるかと思ったら、ビルド時に画像フォーマットの変換に使っているsharpを対象に以下のエラーが出た。\n\n> Error:  \n> Something went wrong installing the \"sharp\" module\n> Cannot find module '../build/Release/sharp-linux-x64.node'\n> Require stack:\n>   /home/runner/work/ikmnjrd.github.io/ikmnjrd.github.io/node_modules/sharp/lib/sharp.js\n\nそのため、`$ npm ci`とした。\n\n### 参考文献\n\n- [スクリプトを使ってランナーでコードをテストする - GitHub Docs](https://docs.github.com/ja/actions/examples/using-scripts-to-test-your-code-on-a-runner)\n"}]},"__N_SSG":true}