{"pageProps":{"tag":"AWS","posts":[{"slug":"minio-s3-express-js","frontmatter":{"title":"AWS S3互換のMinIOにaws-sdk(client-s3)から接続する","description":"@aws-sdk/client-s3を利用したMinIOへの接続例のサンプルコード","date":"2022-12-08","tag":["JavaScript","Express.js","AWS"]},"content":"### 結論\ns3-clientでMinIOに繋げる！\n\n### 状況\nローカルで完結する開発環境でもS3にできるだけ近い形をとりたかった。  \n[MinIO](https://min.io/)というS3互換のオブジェクトストレージが無料らしいので使ってみる。\n\n\n### MinIO導入\n以下のようなディレクトリ構造とする。\n```sh\n.\n├── docker\n│   └── minio\n│       └── data\n├── docker-compose.yml\n```\n```yml\nversion: '3.8'\nservices:\n  minio:\n    image: minio/minio:RELEASE.2022-11-29T23-40-49Z\n    ports:\n      - 9000:9000\n      - 9090:9090\n    environment:\n      - MINIO_ROOT_USER=minio\n      - MINIO_ROOT_PASSWORD=miniopass\n      - MINIO_VOLUMES=/data\n    entrypoint: sh\n    command: -c \"\n      minio server --console-address ':9090'\"\n    volumes:\n      - ./docker/minio/data:/data\n```\n\nコンテナを起動するとlocalhost:9090でminioの管理画面が表示される。\n\n\n### aws-sdkでMinIOに接続する\n`s3.js`\n```js\nimport { S3Client, PutObjectCommand } from '@aws-sdk/client-s3'\n\nconst IS_DEV = process.env.IS_DEV\nconst AWS_S3_REGION = process.env.AWS_S3_REGION\nconst AWS_ACCESS_KEY_ID = process.env.AWS_ACCESS_KEY_ID\nconst AWS_SECRET_ACCESS_KEY = process.env.AWS_SECRET_ACCESS_KEY\nconst AWS_S3_BUCKET_NAME = process.env.AWS_S3_BUCKET_NAME\n\n\nconst s3client = new S3Client(\n  IS_DEV\n    ? {\n        region: AWS_S3_REGION,\n        credentials: {\n          accessKeyId: 'minio', // MINIO_ROOT_USER\n          secretAccessKey: 'miniopass' // MINIO_ROOT_PASSWORD\n        },\n        endpoint: 'http://localhost:9000/',\n        forcePathStyle: true\n      }\n    : {\n        region: AWS_S3_REGION,\n        credentials: {\n          accessKeyId: AWS_ACCESS_KEY_ID,\n          secretAccessKey: AWS_SECRET_ACCESS_KEY\n        }\n      }\n)\nexport const uploadToS3 = async (body) => {\n  try {\n    const data = await s3client.send(\n      new PutObjectCommand({\n        Bucket: AWS_S3_BUCKET_NAME,\n        Key: 'test/key.png',\n        Body: body,\n      })\n    )\n    console.debug('Success', data)\n    return\n  } catch (err) {\n    console.error('Error', err)\n    throw err\n  }\n}\n\n```\n\n`index.js`\n```js\nimport express, { Router } from 'express'\nimport { uploadToS3 } from './s3'\n\nconst app = express()\nconst router = Router()\n\nrouter.post('/image/upload', async (req, res) => {\n    // 最小のpng\n    const reqBodyMock = 'iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAAAAAA6fptVAAAACklEQVQIHWP4DwABAQEANl9ngAAAAABJRU5ErkJggg=='\n\n    await uploadToS3(reqBodyMock)\n\n    return res.status(201)\n  }\n)\n\napp.use(router)\napp.listen('3000')\n```\n\n### multerS3でクライアントのフォームから送信された画像を保存する\n\n`multer.js`\n```js\nimport multer from 'multer'\nimport multerS3 from 'multer-s3'\nimport { s3client } from './s3'\n\nexport const multerUpload = multer({\n  storage: multerS3({\n    s3: s3client,\n    bucket: AWS_S3_BUCKET_NAME,\n    metadata: (_req, file, cb) => {\n      cb(null, { fieldName: file.fieldname })\n    },\n    key: (_req, file, cb) => {\n      cb(null, file.originalname)\n    }\n  })\n})\n```\n\n`index.js`\n```js\nimport express, { Router } from 'express'\nimport { uploadToS3 } from './s3'\nimport { multerUpload } from './multer'\n\nconst app = express()\nconst router = Router()\n\nrouter.post(\n  '/image/upload',\n  multerUpload.single(),\n  async (req, res) => {\n    const file = req.file // 色々都合のいいファイル（本例だとimage/pngだったり的な）\n\n    // s3multerでポート番号が削られてしまうので無理やりつける。\n    const fileLocation = IS_DEV\n      ? file.location.replace(\n          /^http:\\/\\/localhost/,\n          'http://localhost:9000'\n        )\n      : file.location\n\n    return res.status(200).json({location: fileLocation})\n  }\n)\n\napp.use(router)\napp.listen('3000')\n```\n\n### 参考文献\n- [ローカルS3環境(minio)を構築する - Qiita](https://qiita.com/reflet/items/3e0f07bc9d64314515c1)\n- [最小のpng画像](https://yosiopp.net/archives/225/)\n\n### 関連用語\n- busboy\n- multer\n- multerS3\n"}]},"__N_SSG":true}