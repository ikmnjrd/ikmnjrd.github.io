{"pageProps":{"frontmatter":{"title":"TypeScriptでオブジェクトのプロパティをチェックしたい時の解決方法2選","description":"オブジェクトのプロパティを検査したい時の解決策を2つ紹介","date":"2023-05-26","tag":["TypeScript"]},"slug":"ts-strict-property-check","innerHtml":"<h3 id=\"tl%3Bdr\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#tl%3Bdr\" aria-hidden=\"true\">#</a> TL;DR</h3>\n<p>個人的推しは2個目のこっち。</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Impossible<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NoExtraProperties<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">U</span> <span class=\"token operator\">&amp;</span> Impossible<span class=\"token operator\">&lt;</span>Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E3%81%97%E3%81%9F%E3%81%84%E4%BA%8B%E8%B1%A1\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%A7%A3%E6%B1%BA%E3%81%97%E3%81%9F%E3%81%84%E4%BA%8B%E8%B1%A1\" aria-hidden=\"true\">#</a> 解決したい事象</h3>\n<p>次のようなコードはTypeScriptではエラーになりません。</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n  email<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span>\n  email<span class=\"token operator\">:</span> <span class=\"token string\">'john@sample.example'</span><span class=\"token punctuation\">,</span>\n  password<span class=\"token operator\">:</span> <span class=\"token string\">'password'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// passwordは型定義にはない</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> User<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>email\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>これでは必要のないpasswordというプロパティも取り回してしまい、不都合がある場合もあります。</p>\n<h3 id=\"%E8%A7%A3%E6%B1%BA%E7%AD%96\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%96\" aria-hidden=\"true\">#</a> 解決策</h3>\n<p>stack overflowでは次の2019年に投稿された2つの解決策が支持を得ていました。</p>\n<h4 id=\"%E8%A7%A3%E6%B1%BA%E7%AD%961\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%961\" aria-hidden=\"true\">#</a> 解決策1</h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">StrictPropertyCheck<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> TExpected<span class=\"token punctuation\">,</span> TError<span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> TExpected<span class=\"token operator\">></span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\"><span class=\"token builtin\">never</span></span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token operator\">:</span> TError<span class=\"token punctuation\">;</span>\n</code></pre>\n<p>これを先ほどの例に当てはめれると次のようになります。</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">checkUser</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> User<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>\n  input<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token operator\">&amp;</span> StrictPropertyCheck<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> User<span class=\"token punctuation\">,</span> <span class=\"token string\">'MyError'</span><span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>email\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre class=\"language-jsstacktrace\"><code class=\"language-jsstacktrace\"><span class=\"token error-message string\">型 '{ name: string; email: string; password: string; }' の引数を型 '{ name: string; email: string; password: string; } &amp; \"MyError\"' のパラメーターに割り当てることはできません。</span>\n  型 '{ name: string; email: string; password: string; }' を型 '\"MyError\"' に割り当てることはできません。ts(2345)\n</code></pre>\n<h4 id=\"%E8%A7%A3%E6%B1%BA%E7%AD%962\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E8%A7%A3%E6%B1%BA%E7%AD%962\" aria-hidden=\"true\">#</a> 解決策2</h4>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">Impossible<span class=\"token operator\">&lt;</span><span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token keyword\">keyof</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token constant\">P</span> <span class=\"token keyword\">in</span> <span class=\"token constant\">K</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">NoExtraProperties<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">U</span> <span class=\"token keyword\">extends</span> <span class=\"token constant\">T</span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span></span> <span class=\"token operator\">=</span> <span class=\"token constant\">U</span> <span class=\"token operator\">&amp;</span> Impossible<span class=\"token operator\">&lt;</span>Exclude<span class=\"token operator\">&lt;</span><span class=\"token keyword\">keyof</span> <span class=\"token constant\">U</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">keyof</span> <span class=\"token constant\">T</span><span class=\"token operator\">>></span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>例は以下</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">checkUser</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> User<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>input<span class=\"token operator\">:</span> NoExtraProperties<span class=\"token operator\">&lt;</span>User<span class=\"token punctuation\">,</span> <span class=\"token constant\">T</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>input<span class=\"token punctuation\">.</span>email\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">checkUser</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span>\n</code></pre>\n<pre class=\"language-jsstacktrace\"><code class=\"language-jsstacktrace\"><span class=\"token error-message string\">型 '{ name: string; email: string; password: string; }' の引数を型 'NoExtraProperties&lt;User, { name: string; email: string; password: string; }>' のパラメーターに割り当てることはできません。</span>\n  型 '{ name: string; email: string; password: string; }' を型 'Impossible&lt;\"password\">' に割り当てることはできません。\n    プロパティ 'password' の型に互換性がありません。\n      型 'string' を型 'never' に割り当てることはできません。ts(2345)\n</code></pre>\n<p>どのプロパティがエラーとなるのかがわかりやすい点と利用するときの記述の簡単さが推しポイントです。<br>\nその代わり、Impossibleの使い道が他に思いつかない点が少し気がかりです。<br>\nコチラの方が個人的には好みです。</p>\n<h3 id=\"%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\" aria-hidden=\"true\">#</a> 参考文献</h3>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/54775790/forcing-excess-property-checking-on-variable-passed-to-typescript-function\">Forcing excess-property checking on variable passed to TypeScript function - Stack Overflow</a></li>\n<li><a href=\"https://stackoverflow.com/questions/49580725/is-it-possible-to-restrict-typescript-object-to-contain-only-properties-defined\">Is it possible to restrict TypeScript object to contain only properties defined by its class? - Stack Overflow</a></li>\n</ul>\n"},"__N_SSG":true}