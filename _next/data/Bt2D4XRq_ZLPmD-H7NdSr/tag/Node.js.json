{"pageProps":{"tag":"Node.js","posts":[{"slug":"coverage-badge","frontmatter":{"title":"NPMパッケージのREADMEでよく見るテストカバレッジのバッチ作ってみた","description":null,"date":"2022-10-13","tag":["Node.js","JavaScript","GitHub"]},"content":"\n### 疑問に遭遇した状況\n\n\n### 疑問\n\n\n### 周辺用語\n- \n\n\n### 参考文献\n- [Coverage Badge with GitHub Actions - FINALLY!](https://dev.to/thejaredwilcurt/coverage-badge-with-github-actions-finally-59fa)"},{"slug":"esbuild-misc","frontmatter":{"title":"esbuildを触った際の雑記","description":"esbuildについての雑記","date":"2022-03-15","tag":["Node.js","JavaScript","esbuild","TypeScript"]},"content":"\nViteを使った方が楽だけど、できるだけシンプルな環境を作りたい気持ちでesbuildを触っています。\n\n\n### configファイルを作成する場合\nwatchオプションを有効にした時、ビルド情報を出力するため[logLevel](https://esbuild.github.io/api/#log-level)をinfoにすると良い。\n```javascript\n// esbuild.config.js\nconst esbuild = require('esbuild');\n\nesbuild.build({\n  logLevel: 'info',\n})\n```\n```json\n// package.json\n{\n  ...\n  \"scripts\": {\n    \"build\": \"node esbuild.config.js\",\n  }\n  ...\n}\n```\n\n\n\n### CSS Module + TypeScriptで利用したい場合\n`esbuild-css-modules-plugin`をインストールしPluginとして読み込む([GitHubリポジトリ](https://github.com/indooorsman/esbuild-css-modules-plugin))\n\n\ndeclareファイルを`src/`以下に置いておく。\n```typescript\n// index.d.ts\ndeclare module '*.css' {\n  interface IClassNames {\n    [className: string]: string\n  }\n  const classNames: IClassNames;\n  export = classNames;\n}\n```\n\n\n### 周辺用語\n- CSS modules\n- PostCSS\n\n\n### 参考文献\n- [GitHubリポジトリ - esbuild](https://github.com/evanw/esbuild)\n- [How to set up CSS Modules with esbuild](https://how-to.dev/how-to-set-up-css-modules-with-esbuild)\n- [GitHubリポジトリ - esbuild-css-modules-plugin](https://github.com/indooorsman/esbuild-css-modules-plugin))\n- [esbuild の機能が足りないならプラグインを自作すればいいじゃない](https://www.kabuku.co.jp/developers/create-your-own-esbuild-plugin)"},{"slug":"express-node-difference","frontmatter":{"title":"疑問メモ_NodejsとExpressの違い","date":"2021-12-26","tag":["Node.js","Express.js"]},"content":"\n\n### 疑問\nNode.jsはnodeコマンドでWebサーバーとして立ち上がるみたいだけど、一方expressもある。\nnodeコマンドで立ち上がるWebサーバーとexpressは何が違うんだ！！！！\n\n\n### 参考文献\n- [https://developer.mozilla.org/ja/docs/Learn/Server-side/Express_Nodejs/Introduction](https://developer.mozilla.org/ja/docs/Learn/Server-side/Express_Nodejs/Introduction)\n"},{"slug":"javascript-why-var-const-togetter","frontmatter":{"title":"疑問_なぜvarとconstが共存しているのか","date":"2022-01-23","tag":["JavaScript","Next.js","Node.js"]},"content":"### 疑問に遭遇した状況\nNext.jsで`$ next export`が気になり、`~/node_modules/next/dist/cli/next-export.js`を見ていた。\n\n### 疑問\nグローバル宣言している`var`とES2015(ES6)から追加された`const`と`let`が共存している。なぜ？？\n\n```javascript\n#!/usr/bin/env node\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.nextExport = void 0;\nvar _path = require(\"path\");\nvar _fs = require(\"fs\");\nvar _indexJs = _interopRequireDefault(require(\"next/dist/compiled/arg/index.js\"));\nvar _export = _interopRequireDefault(require(\"../export\"));\nvar _utils = require(\"../server/lib/utils\");\nvar _trace = require(\"../trace\");\nvar _isError = _interopRequireDefault(require(\"../lib/is-error\"));\nvar _getProjectDir = require(\"../lib/get-project-dir\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst nextExport = (argv)=>{\n    const nextExportCliSpan = (0, _trace).trace('next-export-cli');\n    const validArgs = {\n        // Types\n        '--help': Boolean,\n        '--silent': Boolean,\n        '--outdir': String,\n        '--threads': Number,\n        // Aliases\n        '-h': '--help',\n        '-s': '--silent',\n        '-o': '--outdir'\n    };\n    let args;\n    try {\n        args = (0, _indexJs).default(validArgs, {\n            argv\n        });\n    } catch (error) {\n        if ((0, _isError).default(error) && error.code === 'ARG_UNKNOWN_OPTION') {\n            return (0, _utils).printAndExit(error.message, 1);\n        }\n        throw error;\n    }\n    if (args['--help']) {\n        console.log(`\n      Description\n        Exports the application for production deployment\n\n      Usage\n        $ next export [options] <dir>\n\n      <dir> represents the directory of the Next.js application.\n      If no directory is provided, the current directory will be used.\n\n      Options\n        -h - list this help\n        -o - set the output dir (defaults to 'out')\n        -s - do not print any messages to console\n    `);\n        process.exit(0);\n    }\n    const dir = (0, _getProjectDir).getProjectDir(args._[0]);\n    // Check if pages dir exists and warn if not\n    if (!(0, _fs).existsSync(dir)) {\n        (0, _utils).printAndExit(`> No such directory exists as the project root: ${dir}`);\n    }\n    const options = {\n        silent: args['--silent'] || false,\n        threads: args['--threads'],\n        outdir: args['--outdir'] ? (0, _path).resolve(args['--outdir']) : (0, _path).join(dir, 'out')\n    };\n    (0, _export).default(dir, options, nextExportCliSpan).then(()=>{\n        nextExportCliSpan.stop();\n        (0, _utils).printAndExit(`Export successful. Files written to ${options.outdir}`, 0);\n    }).catch((err)=>{\n        nextExportCliSpan.stop();\n        (0, _utils).printAndExit(err);\n    });\n};\nexports.nextExport = nextExport;\n\n//# sourceMappingURL=next-export.js.map\n```\n\n### 周辺用語\n- Next.js\n- ESModules\n- CommonJS\n\n\n### 参考文献\n- [MDN - Object.defineProperty()](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n- [javascript.info - モジュール, 導入](https://ja.javascript.info/modules-intro)\n"},{"slug":"licence-seeking","frontmatter":{"title":"package.jsonに記述するlicenceの書き方","description":"Licenseを書く際の決まりについて調べたのでまとめた。","date":"2022-08-06","tag":["npm","Node.js"]},"content":"\n### どのように書くのがいいのか\nMITやISCなどよく書いてあるがどう書くのがいいのか？\nnpm Docsにはこのように書いてある。\n> BSD-2-Clause や MIT などの一般的なライセンスを使用している場合は、次のように、使用しているライセンスの現在の SPDX ライセンス識別子を追加します。\n> { \"license\" : \"BSD-3-Clause\" }\n> --- [package.json | npm Docs](https://docs.npmjs.com/cli/v6/configuring-npm/package-json#license)\n\n### SPDXとは\nLinux Foundationのブログ（日本語訳版）に怪しい日本語でこのように書いてあります。\n> SPDXは、コンポーネント、ライセンス、著作権、セキュリティ リファレンスなどのソフトウェア部品表 (SBOM) 情報を伝達するためのオープンな標準です\n> --- [SPDX : すでに世界共通のソフトウェア部品表 (SBOM) およびサプライチェーン セキュリティで使用 - The Linux Foundation](https://www.linuxfoundation.jp/blog/2021/06/spdx-its-already-in-use-for-global-software-bill-of-materials-sbom-and-supply-chain-security/)\n\n### ライセンスのリストを参照する\n[SPDX License List](https://spdx.org/licenses/)\nリンク先の表からのIdentifierを探し、次のようにかく。\n```json\n{ \"license\" : \"CC0-1.0\" }\n```\n\nUnlicenseなどもしっかりとSPDXライセンスリストに記載されています。\n\n### 余談\n[https://github.com/jslicense/spdx-license-ids](https://github.com/jslicense/spdx-license-ids)のスター数は2桁なのにUsed byの項目が1千万人近くになってるのはどういうことなのか不思議に思った。\n\n\n\n\n\n\n"},{"slug":"markdown-it-process","frontmatter":{"title":"markdown-itのプラグイン開発に失敗したのでメモ","date":"2022-08-07","tag":["JavaScript","Node.js"]},"content":"\n失敗したけど、悔しいので調べたことのメモとそのプラグインの[リポジトリ](https://github.com/ikmnjrd/markdown-it-bqcite)\n作ろうとした機能は、`<blockquote/>` 内の特定prefixから始まる箇所を`<cite/>`で囲もうとういうもの。\n\n```md\n> 内容はこれ\n> --- 出典はこれ\n```\nこんなのを\n\n> 内容はこれ\n> <cite>出典はこれ</cite>\n\nこんな風に出力したかった\n\n### markdown-itの処理の大きな流れ\n1. ソース(.md)をToken単位にまずparse。この際、inlineやblockといった固まりで放置されるものがある。\n2. 1.でparseしたものをStringとして出力しながらinlineやblockで放置されたものをそれぞれのルールに従いながらパース。パースしながら出力\n\n\n### 流れ\nMarkdownIt#render(src)\n\nMarkdownIt#parse(src)\n\nstate = new this.core.State(src, this, env);\n// Tokenクラスの読み込み初期化など\n\nthis.core.process(state)\n// coreルールを順にstateを引き回しながら実行\n// stateをToken[]にparse終了\n\n\nMarkdownIt#renderer#renderを実行。token.typeがinlineならRenderer#renderInlineを実行。独自ルールのあるtoken.typeならそのルールを実行。どちらにも当てはまらないならRenderer#renderTokenを実行\n```js\nRenderer.prototype.render = function (tokens, options, env) {\n  var i, len, type,\n      result = '',\n      rules = this.rules;\n\n  for (i = 0, len = tokens.length; i < len; i++) {\n    type = tokens[i].type;\n\n    if (type === 'inline') {\n      result += this.renderInline(tokens[i].children, options, env);\n    } else if (typeof rules[type] !== 'undefined') {\n      result += rules[type](tokens, i, options, env, this);\n    } else {\n      result += this.renderToken(tokens, i, options, env);\n    }\n  }\n\n  return result;\n};\n```\n\nRenderer#renderInlinの処理例\n\n\nRenderer#renderTokenの処理例\nToken.hiddenなら空文字を返す\n\n\nouTokensに追加?意味わからん\n\n\n\n### テストに使ってた.md\n```md\n> this\n> is\n> test\n> --- in-cite\n\n<!-- >>> second\n--- in-cite -->\n\n\n<!-- >>> aaa\nbbb\nccc -->\n\n> `hoge`\n> hoge\n\n> link in cite\n> --- [link](https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js)\n```"},{"slug":"neovim-volta","frontmatter":{"title":"NeoVimとvoltaを併用するとNodeを見つけてくれない問題","description":"NeoVimとvoltaを使うと必ずこの問題にぶち当たるのでは？","date":"2022-10-13","tag":["Node.js","NeoVim","JavaScript","volta"]},"content":"\n## 環境\n\n| 関連ソフトウェア | バージョン |\n|:--------------|:---------|\n| macOS         | 12.6     |\n| NodeJS        | 16.17.0  |\n| volta         | 1.0.8    |\n| NeoVim        | 8.0      |\n\n\n## 結論\nvoltaを使うなら[voltaのIssue](https://github.com/volta-cli/volta/issues/866)にあるようにinit.vimに以下のような記述をしておく。\n\n```vim\nif executable('volta')\n  let g:node_host_prog = trim(system(\"volta which neovim-node-host\"))\nendif\n```\n\n## 経緯とシューティングタイムライン\n仕事でNeoVimは一切使っていないのですが、休日趣味的に開いてみたらなんか様子がおかしい。\n\nNeoVimを開いて`:checkhealth provider`を入力すると、以下のようなメッセージ。\n\n```markdown\nprovider: health#provider#check\n========================================================================\n\n## Node.js provider (optional)\n  - INFO: Node.js: v16.17.0\n  - WARNING: Missing \"neovim\" npm (or yarn, pnpm) package.\n    - ADVICE:\n      - Run in shell: npm install -g neovim\n      - Run in shell (if you use yarn): yarn global add neovim\n      - Run in shell (if you use pnpm): pnpm install -g neovim\n      - You may disable this provider (and warning) by adding `let g:loaded_node_provider = 0` to your init.vim\n\n```\n\n`npm install -g neovim`もしくは`volta install neovim`をしても変わらない。  \nここで[公式のHelp](https://neovim.io/doc/user/provider.html)を読むと、  \n\n> By default, Nvim searches for \"neovim-node-host\" using \"npm root -g\", which can be slow. To avoid this, set g:node_host_prog to the host path: <cite>[Provider - Neovim docs](https://neovim.io/doc/user/provider.html)</cite>\n\n自分のvoltaを使ってる環境で`npm root -g`を実行すると以下のような結果に。\n```sh\n/Users/ike/.volta/tools/image/node/16.17.0/lib/node_modules\n```\n\nということで、`g:node_host_prog`オプションを設定したいが、うまくいかん。  \nそもそもvoltaを使ってグローバルインストールしたパッケージは`/Users/ike/.volta/bin/volta-shim`にshimとしてインストールされ、シンボリックリンクが貼られる形をとっている。  \nこんな感じ  \n```sh\n% ls -al ~/.volta/bin\ndrwxr-xr-x  12 ike  staff      384 Oct 13 16:45 .\ndrwxr-xr-x   9 ike  staff      288 Sep 10 23:29 ..\nlrwxr-xr-x   1 ike  staff       32 Sep 21 21:34 http-server -> /Users/ike/.volta/bin/volta-shim\nlrwxr-xr-x   1 ike  staff       32 Sep 15 23:36 memlab -> /Users/ike/.volta/bin/volta-shim\nlrwxr-xr-x   1 ike  staff       32 Oct 13 16:45 neovim-node-host -> /Users/ike/.volta/bin/volta-shim\nlrwxr-xr-x   1 ike  staff       32 Sep 10 23:29 node -> /Users/ike/.volta/bin/volta-shim\nlrwxr-xr-x   1 ike  staff       32 Sep 10 23:29 npm -> /Users/ike/.volta/bin/volta-shim\nlrwxr-xr-x   1 ike  staff       32 Sep 10 23:29 npx -> /Users/ike/.volta/bin/volta-shim\n-rwxr-xr-x   1 ike  staff  6522504 Jun  2 09:14 volta\n-rwxr-xr-x   1 ike  staff  4771376 Jun  2 09:14 volta-migrate\n-rwxr-xr-x   1 ike  staff  5522480 Jun  2 09:14 volta-shim\nlrwxr-xr-x   1 ike  staff       32 Sep 10 23:29 yarn -> /Users/ike/.volta/bin/volta-shim\n```\n\nわからん状態だったため、GitHubを探し、[結論](#結論)部分でも貼ったコードをコピペして終了。  \nVim(NeoVim)わからん。  \n\n### 周辺用語\n- Shim\n\n### 参考文献\n- [volta + neovim compatibility issues · Issue #866 · volta-cli/volta](https://github.com/volta-cli/volta/issues/866)\n- [Understanding Volta | Volta](https://docs.volta.sh/guide/understanding#managing-your-toolchain)\n- [Provider - Neovim docs](https://neovim.io/doc/user/provider.html)\n- [Shim と Polyfill](https://qiita.com/ybiquitous/items/3104beb84b78ca15f407)"},{"slug":"next-sitemap-sample","frontmatter":{"title":"Next.jsのサンプル集を参考にサイトマップを作成しようとしたらエラー","date":"2022-02-08","tag":["Node.js","Next.js","JavaScript"]},"content":"エラーに遭遇しました。\n\n### 環境\n- Node: v16.13.2\n- Next.js: 12.0.10\n- globby: 13.1.1\n\n[公式のサンプル集の「with-sitemap」](https://github.com/vercel/next.js/tree/canary/examples/with-sitemap)では以下のようなスクリプトをサーバー実行時に（`next.config.js`のisServerオブションをフラグにして）実行している。\n\n\n./scripts/generate-sitemap.js\n```javascript\nconst fs = require('fs')\nconst globby = require('globby')\n\nfunction addPage(page) {\n  const path = page.replace('pages', '').replace('.js', '').replace('.mdx', '')\n  const route = path === '/index' ? '' : path\n\n  return `  <url>\n    <loc>${`${process.env.WEBSITE_URL}${route}`}</loc>\n    <changefreq>hourly</changefreq>\n  </url>`\n}\n\nasync function generateSitemap() {\n  // Ignore Next.js specific files (e.g., _app.js) and API routes.\n  const pages = await globby([\n    'pages/**/*{.js,.mdx}',\n    '!pages/_*.js',\n    '!pages/api',\n  ])\n  const sitemap = `<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n${pages.map(addPage).join('\\n')}\n</urlset>`\n\n  fs.writeFileSync('public/sitemap.xml', sitemap)\n}\n\ngenerateSitemap()\n\n```\n\n\n遭遇したエラーは以下\n\n```bash\nError [ERR_REQUIRE_ESM]: require() of ES Module ./node_modules/globby/index.js from ./scripts/generate-sitemap.js not supported.\nInstead change the require of index.js in ./scripts/generate-sitemap.js to a dynamic import() which is available in all CommonJS modules.\n```\n\n最新のglobbyからはCommonJSが省かれたらしい。\n\n\n### 解決策\npackage.jsonを以下のように書き換え、`$npm i`を実行\n```json\n\"globby\": \"^13.1.1\",\n```\n↓\n```json\n\"globby\": \"^11.0.1\",\n```\n\nインストール後、ビルド時に`./public/sitemap.xml`が無事出力された。\n\n\n### 周辺用語\n- commonJS\n- ESModules\n\n\n### 参考文献\n- [Build a sitemap generator in Next.js - LogRocket Blog](https://blog.logrocket.com/build-sitemap-generator-nextjs/)"},{"slug":"node-package-json-keys","frontmatter":{"title":"ESモジュール内でJSONを読み込む方法","description":"ESモジュール内でJSONを読み込む方法","date":"2022-08-06","tag":["Node.js","JavaScript","JSON"]},"content":"\n### 楽ができるNodeのバージョン\nNode.js`v17.5~`もしくは`v16`の`--experimental-json-modules`オブションを使えば利用できます。\n\n```js\n/* index.js */\n// An import assertion in a static import\nimport info from `./package.json` assert { type: `json` };\n\n// An import assertion in a dynamic import\nconst { default: info } = await import(\"./package.json\", {\n  assert: {\n    type: \"json\",\n  },\n});\n```\n`v16`でオプション付きで実行する場合は`$ node --experimental-json-modules index.js`と実行します。\nちなみに`--experimental-wasm-modules`というオプションで`wasm`も読み込めます。\n\n### 対象のバージョン以外でやる方法\n1. JSONを読み込み自力でパースする\n```js\nimport { readFile } from 'fs/promises';\nconst json = JSON.parse(\n  await readFile(\n    new URL('./some-file.json', import.meta.url)\n  )\n);\n```\n2. [createRequire](https://nodejs.org/api/module.html#module_module_createrequire_filename)を使う\n```js\nimport { createRequire } from \"module\";\nconst require = createRequire(import.meta.url);\nconst data = require(\"./data.json\");\n```\n\n\n### 参考\n本記事のソースコードおよび内容は以下のリンク先から引用しています。\n- [How to import JSON files in ES modules (Node.js)](https://www.stefanjudis.com/snippets/how-to-import-json-files-in-es-modules-node-js/)\n"},{"slug":"v8engine-asm-show","frontmatter":{"title":"V8エンジン（JavaScript）が吐くアセンブリを見たい！","date":"2022-01-09","tag":["JavaScript","Node.js"]},"content":"\nアセンブリを読みたい願望がある。\nnodeでもV8エンジンの`--print-code`オプションが使える。\n```bash\n$ node --print-code sample.js\n$ d8 --print-code sample.js\n```\n\n実際に出力してみたけど、自分で書いたコード部分すら見つからず、わけわからんかった。\n（Raw Codeとして出力されると紹介されていたが、見当たらなかった。）\n\n\n### 参考\n- [v8でjsとwasmのアセンブリを取る方法](https://zenn.dev/umashiba/articles/d64fb62a09fb4f)\n- [GitHubの公式ミラーリポジトリ](https://github.com/v8/v8)\n- [公式Gitリポジトリ](https://chromium.googlesource.com/v8/v8.git)\n- [https://v8.dev/docs](https://v8.dev/docs)\n"},{"slug":"webpack-buffer-on-nodejs","frontmatter":{"title":"WebpackでBuffer（Node.js）を使う","date":"2022-01-02","tag":["webpack","Node.js"]},"content":"\n駆け出しエンジニアのふわっとした理解を書く。\nNode.jsのコアモジュールであるBuffer()をフロント側で使いたいときがあるらしい。[参考の該当箇所](https://github.com/CyberAgentHack/web-speed-hackathon-2021/blob/135468cc9f69f6f27ba0bc9d3b74d60f1ebe3a40/client/src/components/foundation/CoveredImage/CoveredImage.jsx#L21-L23)（パフォーマンスチューニングを行う元して書かれたソースコードなので、ベストプラクティス的ではないのかもしれないが、初心者の私には判断つきません）\n```javascript\nconst imageSize = React.useMemo(() => {\n  return data !== null ? sizeOf(Buffer.from(data)) : null;\n}, [data]);\n```\n\n\n### 解決策\n解決策(といっても、元々のソースコードに書かれていたが)、下に記載する設定がないとブラウザから怒られてしまいます。\n```bash\nCoveredImage.jsx:22 Uncaught ReferenceError: Buffer is not defined\n```\n\n\n`webpack.config.js` に以下のように追記する。\n```javascript\nplugins: [\n    new webpack.ProvidePlugin({\n      Buffer: ['buffer', 'Buffer'],\n    }),\n]\n```\n\n\n\n### 参考文献\n- [https://github.com/diegomura/react-pdf/issues/1029](https://github.com/diegomura/react-pdf/issues/1029)\n- [https://github.com/CyberAgentHack/web-speed-hackathon-2021](https://github.com/CyberAgentHack/web-speed-hackathon-2021)\n- [https://webpack.js.org/plugins/provide-plugin/](https://webpack.js.org/plugins/provide-plugin/)\n"}]},"__N_SSG":true}