{"pageProps":{"frontmatter":{"title":"イベントキャプチャリングとバブリング（React）","categories":"tech","date":"2022-01-17","tag":["React","JavaScript","Webブラウザ"]},"slug":"event-bubbling-capturing-on-react","innerHtml":"<p>Reactはあまり関係ないです。</p>\n<p>筆者はReactからWebの世界に入ったため、Reactの世界観からWeb標準技術を見ることが多いですが、Reactのドキュメントを読んでいるとWeb標準なのかReactの世界の話なのかがよくわからないまま進んでしまいます。そんな状況だったので、JavaScriptの勉強を改めてしていたところに「Reactをやっていて出てきた言葉だけど、なんかよくわからないからスルーしたやつだ！」と再会を果たしたので記念にこの記事を書いています。</p>\n<h3 id=\"%E4%BE%8B%E9%A1%8C\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E4%BE%8B%E9%A1%8C\" aria-hidden=\"true\">#</a> 例題</h3>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">pだよ</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>作成した<code>&lt;p/&gt;</code>をクリックすると次のようになります。これが何気なく目にしている挙動と書き方だと思います。</p>\n<p><img src=\"/images/posts/event-bubbling-capturing-on-react-0.avif\" alt=\"実行結果1\"></p>\n<p>次に<code>onClickCapture</code>という属性からconsole.logで結果を出力してみましょう。</p>\n<pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Hoge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">onClickCapture</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">pだよ</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>console.logで出力される順序が変わりました。</p>\n<p><img src=\"/images/posts/event-bubbling-capturing-on-react-1.avif\" alt=\"実行結果2\"></p>\n<p>これはWEBの標準仕様、DOMのイベントフローに基づいた仕様なのでvanillaJSであろうが、Reactであろうが元の考え方は一緒です。</p>\n<h3 id=\"%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%95%E3%83%AD%E3%83%BC\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%83%95%E3%83%AD%E3%83%BC\" aria-hidden=\"true\">#</a> イベントフロー</h3>\n<p><code>キャプチャリングフェーズ</code> 親から子へイベントを見ていく処理\n|\n<code>ターゲットフェーズ</code> 発生源の要素に到達した後、その要素自体の処理\n|\n<code>バブリングフェーズ</code> 発生源から親へイベントを見ていく段階\n参考: <a href=\"https://www.w3.org/TR/DOM-Level-3-Events/#event-flow\">https://www.w3.org/TR/DOM-Level-3-Events/#event-flow</a></p>\n<h3 id=\"javascript%E3%81%A8react\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#javascript%E3%81%A8react\" aria-hidden=\"true\">#</a> JavaScriptとReact</h3>\n<p>JavaScriptではaddEventListenrで初心者的に何も意識せずにイベントを追加すると、バブリングフェーズでイベントが発火します。</p>\n<p>Reactでも通常、ほとんどのイベントでバブリングフェーズで発火します。</p>\n<blockquote>\n<p>以下のイベントハンドラはイベント伝搬のバブリングフェーズで呼び出されます。キャプチャフェーズのイベントハンドラを登録するには、イベント名に Capture を追加します。たとえば、キャプチャフェーズでクリックイベントを処理するには onClick の代わりに onClickCapture を使用します。</p>\n</blockquote>\n<h3 id=\"addeventlistener%E3%81%AE%E7%AC%AC3%E5%BC%95%E6%95%B0%EF%BC%88%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%89\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#addeventlistener%E3%81%AE%E7%AC%AC3%E5%BC%95%E6%95%B0%EF%BC%88%E3%82%AA%E3%83%97%E3%82%B7%E3%83%A7%E3%83%B3%EF%BC%89\" aria-hidden=\"true\">#</a> addEventListenerの第3引数（オプション）</h3>\n<p>第3引数にあたるものは<code>options</code>、もしくは<code>useCapture</code>のプロパティです。構造上、第3引数に急にBoolean(true/false)が現れたら、useCapture属性のことです。\n以下に引用したMDNの小難しく感じる文章もそこそこ理解できるようになったのではないでしょうか。</p>\n<ul>\n<li>options\n<ul>\n<li>capture\n<ul>\n<li>Boolean値で、この型のイベントがDOMツリーで下に位置するEventTargetに配信dispatchされる前に、登録されたlistenerに配信されることを示します。</li>\n</ul>\n</li>\n<li>once\n<ul>\n<li>Boolean値で、listenerの呼び出しを一回のみのとしたいかどうかを値で指定します。trueを指定すると、listenerは一度実行された時に自動的に削除されます。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>useCapture\n<ul>\n<li>Boolean値で、この型のイベントが、DOMツリー内の下のEventTargetに配信される前に、登録されたlistenerに配信されるかどうかを示します。ツリーを上方向にバブリングしているイベントは、キャプチャーを使用するように指定されたリスナーを起動しません。イベントのバブリングとキャプチャーは、両方の要素がそのイベントのハンドラーを登録している場合に、別の要素内に入れ子になっている要素で発生するイベントを伝播する2つの方法です。イベント伝播モードは、要素がイベントを受け取る順番を決定します。詳細な説明は DOM Level 3 Events と JavaScript Event order を参照してください。指定されていない場合、useCaptureは既定でfalseとなります。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"%E5%8F%82%E8%80%83\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%82%E8%80%83\" aria-hidden=\"true\">#</a> 参考</h3>\n<ul>\n<li><a href=\"https://uhyohyo.net/javascript/3_4.html\">https://uhyohyo.net/javascript/3_4.html</a></li>\n<li><a href=\"https://developer.mozilla.org/ja/docs/Web/API/EventTarget/addEventListener\">https://developer.mozilla.org/ja/docs/Web/API/EventTarget/addEventListener</a></li>\n<li><a href=\"https://ja.reactjs.org/docs/events.html\">https://ja.reactjs.org/docs/events.html</a></li>\n<li><a href=\"https://ja.reactjs.org/blog/2020/08/10/react-v17-rc.html#no-event-pooling\">https://ja.reactjs.org/blog/2020/08/10/react-v17-rc.html#no-event-pooling</a></li>\n</ul>\n","createdAt":"2022-10-15","updatedAt":"2022-10-15"},"__N_SSG":true}