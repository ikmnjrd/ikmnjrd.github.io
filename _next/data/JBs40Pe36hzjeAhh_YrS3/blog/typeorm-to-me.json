{"pageProps":{"frontmatter":{"title":"私が知ってるTypeORMについて、またはPrismaとの比較","description":"TypeORMに対して私が思ったこと","date":"2024-11-19","tag":["JavaScript","TypeScript"]},"slug":"typeorm-to-me","innerHtml":"<h2 id=\"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\" aria-hidden=\"true\">#</a> はじめに</h2>\n<p>私はTypeORMについてかなりネガティブ寄り\nな意見を持っています。<br>\nこれはTypeScript環境でのORMは<a href=\"https://www.prisma.io/\">Prisma</a>が1強とされる2023年、そんな時期に”Tier2以下”とされるORMを使うことを強いられたからにほかならないと思いますが、その”Tier2以下”から見える景色というのは貴重だという思いで、自分から見えた景色を書いていきます。<br>\nORMの厳密な定義はわかりませんが、ORMかそうじゃないかという論争をたまに見かけます。自分には判断がつかないのでTypeORMやPrismaによき期待される層のことを総称してORMとこの記事の中では呼びます。</p>\n<h2 id=\"%E3%81%93%E3%81%93%E3%81%8C%E3%81%A0%E3%82%81%E3%81%A0%E3%82%88typeorm\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%81%93%E3%81%93%E3%81%8C%E3%81%A0%E3%82%81%E3%81%A0%E3%82%88typeorm\" aria-hidden=\"true\">#</a> ここがだめだよTypeORM</h2>\n<h3 id=\"%E5%9E%8B%E3%81%8C%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A5%E3%82%89%E3%81%84\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%9E%8B%E3%81%8C%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A5%E3%82%89%E3%81%84\" aria-hidden=\"true\">#</a> 型が取り出しづらい</h3>\n<p>まずTypeORMのテーブル定義はClassとデコレータで行われます。</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Entity<span class=\"token punctuation\">,</span> PrimaryGeneratedColumn<span class=\"token punctuation\">,</span> Column <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"typeorm\"</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> database<span class=\"token operator\">:</span> <span class=\"token string\">\"secondDB\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>リレーションの記述もこれに従います。</p>\n<pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Entity</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> database<span class=\"token operator\">:</span> <span class=\"token string\">\"secondDB\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">PrimaryGeneratedColumn</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    id<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    firstName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Column</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    lastName<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>\n\n    <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">OneToMany</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Photo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>photo<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> photo<span class=\"token punctuation\">.</span>user<span class=\"token punctuation\">)</span>\n    photos<span class=\"token operator\">:</span> Photo<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>次にUserテーブルから条件に一致するデータを取り出すときはこう書きます。</p>\n<pre class=\"language-ts\"><code class=\"language-ts\">userRepository<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      where<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        firstName<span class=\"token operator\">:</span> <span class=\"token string\">\"Timber\"</span><span class=\"token punctuation\">,</span>\n        lastName<span class=\"token operator\">:</span> <span class=\"token string\">\"Saw\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>ここにもうTypeORMの嫌なところが顔を出します。<br>\n上のコードの返り値からPromiseを解決させると<code>Userインスタンス</code>が現れます。<br>\nつまり、この型には<code>{ photos: Photo[] }</code>が含まれています。もちろん実行結果にはphotosは含まれず、relation先も含めて取得する場合はそれ用のオプションがあります。<br>\n最悪ですね。</p>\n<p>対応作はもちろんあって、元のUserからOmitしたものをベースに使用し、オプション次第で自分たちで型を組み立てるということもできるわけですが、二度手間です。Prismaならここらもうまくやってくれます。</p>\n<p>ちなみに<a href=\"https://typeorm.io/update-query-builder\">クエリビルダ</a>として使っても一緒です。（Prismaは最近クエリビルダでSQLを書いたらそのSQLに応じた型を提供してくれるようになったというニュースを最近みました。実際にまだ使ってないのでどの程度のものなにかは知りません。）</p>\n<h3 id=\"%E3%81%84%E3%81%BE%E3%81%A0%E3%81%AB%E3%83%A1%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%8C%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%AA%E3%81%84\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%81%84%E3%81%BE%E3%81%A0%E3%81%AB%E3%83%A1%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%8C%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%AA%E3%81%84\" aria-hidden=\"true\">#</a> いまだにメジャーバージョンがリリースされてない</h3>\n<p>TypeORMの名前はよく聞くかと思いますが、実はまだv0.3あたりで、数年前にでました。それまでv0.1やv0.2です。<br>\n0.2から0.3で破壊的な変更も入っています。</p>\n<h2 id=\"%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E6%89%80%E6%84%9F\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E6%89%80%E6%84%9F\" aria-hidden=\"true\">#</a> 個人的な所感</h2>\n<p>TypeORMはTypeScriptバックエンドの初期を担ったツールという印象で、今ではもう時代遅れだと感じます。<br>\nその理由は自分の中で明確で、テーブル定義もTypeScriptで行おうとした点にあると思っています。<br>\nリレーショナルデータベースでよく使う機能に限って言っても、デコレータは使わないシンプルなTypeScriptの表現力でカバーしきれていません。そこを近道的にクラスとデコレータで表現をしたため行き詰まり、Prismaにその座を奪われたという印象です。PrismaはDSLですしね。<br>\nソフトウェアの栄枯盛衰のサイクルについて学びがあったような、なかったような気がします。<br>\n素直に時代にあった選択肢を選択しよう。</p>\n<h3 id=\"%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE\" aria-hidden=\"true\">#</a> 参考文献</h3>\n<ul>\n<li><a href=\"https://www.prisma.io/\">Prisma | Simplify working and interacting with databases </a></li>\n<li><a href=\"https://typeorm.io/update-query-builder\">Update using Query Builder | TypeORM</a></li>\n</ul>\n","anchors":[{"text":"はじめに","link":"%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB"},{"text":"ここがだめだよtypeorm","link":"%E3%81%93%E3%81%93%E3%81%8C%E3%81%A0%E3%82%81%E3%81%A0%E3%82%88typeorm"},{"text":"型が取り出しづらい","link":"%E5%9E%8B%E3%81%8C%E5%8F%96%E3%82%8A%E5%87%BA%E3%81%97%E3%81%A5%E3%82%89%E3%81%84"},{"text":"いまだにメジャーバージョンがリリースされてない","link":"%E3%81%84%E3%81%BE%E3%81%A0%E3%81%AB%E3%83%A1%E3%82%B8%E3%83%A3%E3%83%BC%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%81%8C%E3%83%AA%E3%83%AA%E3%83%BC%E3%82%B9%E3%81%95%E3%82%8C%E3%81%A6%E3%81%AA%E3%81%84"},{"text":"個人的な所感","link":"%E5%80%8B%E4%BA%BA%E7%9A%84%E3%81%AA%E6%89%80%E6%84%9F"},{"text":"参考文献","link":"%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE"}]},"__N_SSG":true}