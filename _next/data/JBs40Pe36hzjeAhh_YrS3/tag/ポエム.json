{"pageProps":{"tag":"ポエム","posts":[{"slug":"narrative-of-my-criteria-for-tech-selection","frontmatter":{"title":"へっぽこエンジニアの技術選定時の頭の中","date":"2022-01-07","tag":["ポエム"]},"content":"\n私は2020年12月からWebエンジニアとして働いている小市民です。\n\n## 2022/1\n世の中のフロントエンドプロジェクトではstorybookなるものが使われているらしいな...\nとりあえず神ツールであるReactとWebpackで使ってみるとするか...\n最新のWebpack5だとWebpack4->5からの破壊的変更のせいでstorybookがそのまま使えないだと？！！バッチが配布されているらしいが...\nじゃあWebpackではなく何やら爆速と話題のesbuildは、、、cssをインポートできないというブログがちらほら...？\n\n[公式](https://esbuild.github.io/content-types/#css-from-js)によると、CSSモジュールとしてのインポートはまだできないって書いてある。\n>You can also import CSS from JavaScript. When you do this, esbuild will gather all CSS files referenced from a given entry point and bundle it into a sibling CSS output file next to the JavaScript output file for that JavaScript entry point. So if esbuild generates app.js it would also generate app.css containing all CSS files referenced by app.js. Here's an example of importing a CSS file from JavaScript:\n>```javascript\n>import './button.css'\n>\n>export let Button = ({ text }) =>\n>  <div className=\"button\">{text}</div>\n>```\n>Note that esbuild doesn't yet support CSS modules, so the set of export names from a CSS file is currently always empty. Supporting a basic form of CSS modules is on the roadmap.\n\n\nふーん。とりあえずstorybookとviteをインストールして...ん？\n今webpackって見えたような...webpackいるな...\n\n\n\n```javascript\nwhile (何かいいの見つかればな〜){\n  （...GitHubで「storybook vite」で検索）\n  （...!!...😣）\n}\n```\n\nこの文章はなんの役に立つんですかね？（疑問）\n"},{"slug":"refactoring-and-develop","frontmatter":{"title":"リファクタリングしてますか？","description":"社のチーム内での共有に書いたメモの一部","date":"2024-04-27","tag":["ポエム","リファクタリング"]},"content":"\n\n### 伝えたいことの結論\n「リファクタリング」という言葉には新機能の追加タスクでも既存コードベースの改修が含まれる。\n\n#### 自己紹介\n前提として、私自身は小さな受託システム開発会社（50人規模）で働くWebエンジニアで主に新規開発を転々とやっています。\n\n\n### いつやるか\nコードを触る機会があったなら、それは常にリファクタリングするタイミング。\n\n### 例え話\n料金を表示するコードがあったとする。\n\n```jsx\nconst price = 100\n\nreturn (\n  <div>\n    {{\n      price.toLocaleString(\"ja-JP\", {\n        style: \"currency\", currency: \"JPY\",\n      })\n    }}\n  </div>\n)\n```\n\nもし料金を国別の表にするという変更があったら、次のようにしたとする。  \n\n```jsx\nconst priceJP = 100\nconst priceUS = 1\n\nreturn (\n  <div>\n    <div>日本: {{\n       priceJP.toLocaleString(\"ja-JP\", {\n         style: \"currency\", currency: \"JPY\",\n       })\n    }}</div>\n    <div>米国: {{\n       priceUS.toLocaleString(\"en-US\", {\n         style: \"currency\", currency: \"USD\",\n       })\n     }}</div>\n  </div>\n)\n```\n\npriceだったものが暗黙の了解として日本料金を示していたが、他の国が入ったことで暗黙の了解は崩れそれぞれを明示するに至った。  \n私はこれをいい変更だと考えるものとして次の話に進む。  \n\n### 実際によくあるやつ\nこの部分を既存コードの変更を嫌がって次のようにすることってまま稀によくあると思う。\n\n```jsx\nconst price = 100 // 名前の変更もしない\nconst priceUS = 1 // 新しく追加\n```\n\n私はこういう時、変更の箇所が増えて自分が負わないでいい責任を負ってる感覚を味わうことがあるが、そこも含めてリファクタリングや仕様変更と呼びたい。  \n\n\nしかもこういった部分は `price` のままにするとレビュワーからは差分にならないのでGitHub上から見えづらい。  \n\nそのためレビュイーに頼る部分が多くなるが、善意でバグを発生させようとも善意を持ちたい（静的解析ツールを存分に頼ろう）"}]},"__N_SSG":true}