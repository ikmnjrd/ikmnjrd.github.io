{"pageProps":{"tag":"GitHub","posts":[{"slug":"GitHub-from-https-to-ssh","frontmatter":{"title":"GitHubのhttpsからSSH通信への切り替え","date":"2021-10-29","tag":["GitHub"]},"content":"\n```bash\n$ git remote -v\nターミナルを開いてください。\nワーキングディレクトリをローカルプロジェクトに変更します。\n変更したいリモートの名前を取得するため、既存のリモート一覧を表示します。\n$ git remote -v\n> origin  https://github.com/USERNAME/REPOSITORY.git (fetch)\n> origin  https://github.com/USERNAME/REPOSITORY.git (push)\ngit remote set-url コマンドでリモートの URL を HTTPS から SSH に変更します。\n$ git remote set-url origin git@github.com:USERNAME/REPOSITORY.git\nリモート URL が変更されたことを検証します。\n$ git remote -v\n# Verify new remote URL\n> origin  git@github.com:USERNAME/REPOSITORY.git (fetch)\n> origin  git@github.com:USERNAME/REPOSITORY.git (push)\n```\n\n参考：[公式サイト](https://docs.github.com/ja/get-started/getting-started-with-git/managing-remote-repositories)\n"},{"slug":"eleventy-on-github-pages","frontmatter":{"title":"Googles製のテンプレート「eleventy-high-performance-blog」をGithub Pagesで使う","date":"2022-02-06","tag":["eleventy.js","GitHub"]},"content":"\nそもそも11tyを使ったのは、Next.jsのexport(静的)\n\n### Google Anarytics\ncache.jsをオリジナルのコードに直す（）\n\nプロキシ設定の解除\n\n\n### docsディレクトリに静的ファイルを吐き出す設定\n```javascript\n// eleventy.js\n    dir: {\n      input: \".\",\n      includes: \"_includes\",\n      data: \"_data\",\n      output: \"docs\",\n    },\n```\n\n### git push時のビルド設定を削除\n以下の記述を削除\n```json\n// package.json\n  \"pre-push\": [\n    \"build\"\n  ],\n```\n\n### 周辺用語\n- \n\n\n### 参考文献\n- []()"},{"slug":"push-and-test-with-github-actions","frontmatter":{"title":"GitHubにpushした時に特定コマンドの実行結果でマージ可否の設定","description":"GitHubでpushした時にマージ可否を設定する","date":"2022-09-11","tag":["GitHub","CI/CD"]},"content":"\n## 手順\n\nワークフローの設定（コード管理できるもの）とGitHubのUI上から設定するものに分けて考える\n\n### ワークフローの設定\n\n例として貼り付けますが、[ここ](https://docs.github.com/ja/actions/examples/using-scripts-to-test-your-code-on-a-runner)を参考にするなど自分の環境に合わせカスタマイズしてください。\n\n```yaml\nname: exec-tests\non:\n  push:\n\njobs:\n  status-check:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v3\n\n      - name: Use Node.js ${{ inputs.node-version }}\n        uses: actions/setup-node@v3\n        with:\n          node-version: '16.x'\n\n      - name: Get Cache Dependencies\n        uses: actions/cache@v3\n        with:\n          path: ~/.npm\n          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}\n          restore-keys: |\n            ${{ runner.os }}-node-\n\n      - name: Install Dependencies\n        run: npm ci\n\n      - name: Create avif images dir\n        run: mkdir tmp\n\n      - name: Build\n        run: npm run build\n        env:\n          NODE_OPTIONS: '--max_old_space_size=4096'\n\n      - name: Check by linter\n        run: npm run lint\n\n      - name: Check by TypeScript Compiler\n        run: npm run typecheck\n\n      - name: Run Tests\n        run: npm run test\n\n```\n\n### リポジトリ(Web上から)の設定\n\n以下の画面から編集\n![create-protection](https://i.gyazo.com/b5ca6098ced1849a751945e9e45d2c62.png)\nmainブランチの保護をするため、「main」と入力。  \n「Require status checks to pass before merging」にチェックを入れ、検索窓から「status-check」を入力、選択。  \n![入力例1](https://i.gyazo.com/7e5c454ddc160cff2b14487e48a12504.png)\n\nここまで設定できると、以下のような画面で表示できる。\n![動作例1](https://i.gyazo.com/ccf3105509cc3d866b5cc6ca9cf26524.png)\n\nこの設定だと警告が出るがマージはぽちぽちとクリックすればできてしまうので、「Do not allow bypassing the above settings」の設定もしておく。\n![設定例2](https://i.gyazo.com/31b6721b6b8636087028d71c1f906445.png)\n\nこれでマージするにはコードの変更を余儀なくされる。\n![動作例2](https://i.gyazo.com/bf39f63f875bc6ca659adbaca36bc357.png)\n\n## 余談\n\n### 意図通りいかなかったこと\n\n`npm ci --ignore-scripts`コマンドを使って依存関係のインストールが爆速になるかと思ったら、ビルド時に画像フォーマットの変換に使っているsharpを対象に以下のエラーが出た。\n\n> Error:  \n> Something went wrong installing the \"sharp\" module\n> Cannot find module '../build/Release/sharp-linux-x64.node'\n> Require stack:\n>   /home/runner/work/ikmnjrd.github.io/ikmnjrd.github.io/node_modules/sharp/lib/sharp.js\n\nそのため、`$ npm ci`とした。\n\n### 参考文献\n\n- [スクリプトを使ってランナーでコードをテストする - GitHub Docs](https://docs.github.com/ja/actions/examples/using-scripts-to-test-your-code-on-a-runner)\n"},{"slug":"vscode-gistpad","frontmatter":{"title":"GistPadを使うなら設定しておきたいVSCodeの表示設定","description":"VSCodeのエクスプローラーのサイドバーに拡張機能の要素を表示する","date":"2023-05-03","tag":["VSCode","GitHub"]},"content":"\n### おすすめの設定(表示方法)\nVSCodeで一番開いているである`ファイルエクスプローラー`の画面。その下の部分（タイムライン等が表示されている箇所）にGistPadを表示する。  \n\n`アクティビティサイドバー`に表示されたGistPadのアイコンをドラッグし`サイドバー`にドロップすれば表示されます。  \n\nこの表示が気に入らなければ、`エクスプローラー`と書かれた右のば三点リーダーから解除できます。  \n![dot-ellipsis](https://i.gyazo.com/344c5efc3d00536d832df6bf8fd38ff4.png)\n\nちなみに自分は`アクティビティサイドバー`と`サイドバー`という用語も初めて意識した程度だったので、参考にしたサイトと図を紹介しておきます。\n> ![vscode-screen-structure](https://image.itmedia.co.jp/ait/articles/2105/14/di-vscp0201.gif)\n> <cite>引用元: [VS Codeでのファイルの作成と編集の第一歩：アクティビティーバーと［エクスプローラー］ビューを使ってみよう：Visual Studio Codeで快適Pythonライフ（1/2 ページ） - ＠IT](https://atmarkit.itmedia.co.jp/ait/articles/2105/14/news025.html)</cite>\n\n### GistPadについての感想\n`cmd + P`での移動候補としても表示されてとてもいい感触です。\n\n### GistPadを知るきっかけになったTweet\n\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">GistPad - Visual Studio Marketplace VSCode の拡張として Gist と GitHub レポジトリをメモ帳代わりに使える仕組み少し使ってみた感想。<br><br>1. 大変便利、拡張なのでどのリポジトリを開いていても共有のメモ帳として使える<br>2. VSCode 拡張が適用されるので md や rst…</p>&mdash; V (@voluntas) <a href=\"https://twitter.com/voluntas/status/1652150281298407424?ref_src=twsrc%5Etfw\">April 29, 2023</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\n### 参考文献\n- [VS Codeでのファイルの作成と編集の第一歩：アクティビティーバーと［エクスプローラー］ビューを使ってみよう：Visual Studio Codeで快適Pythonライフ（1/2 ページ） - ＠IT](https://atmarkit.itmedia.co.jp/ait/articles/2105/14/news025.html)\n"}]},"__N_SSG":true}