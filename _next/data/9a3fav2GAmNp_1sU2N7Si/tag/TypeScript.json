{"pageProps":{"tag":"TypeScript","posts":[{"slug":"esbuild-misc","frontmatter":{"title":"esbuildを触った際の雑記","description":"esbuildについての雑記","date":"2022-03-15","tag":["Node.js","JavaScript","esbuild","TypeScript"]},"content":"\nViteを使った方が楽だけど、できるだけシンプルな環境を作りたい気持ちでesbuildを触っています。\n\n\n### configファイルを作成する場合\nwatchオプションを有効にした時、ビルド情報を出力するため[logLevel](https://esbuild.github.io/api/#log-level)をinfoにすると良い。\n```javascript\n// esbuild.config.js\nconst esbuild = require('esbuild');\n\nesbuild.build({\n  logLevel: 'info',\n})\n```\n```json\n// package.json\n{\n  ...\n  \"scripts\": {\n    \"build\": \"node esbuild.config.js\",\n  }\n  ...\n}\n```\n\n\n\n### CSS Module + TypeScriptで利用したい場合\n`esbuild-css-modules-plugin`をインストールしPluginとして読み込む([GitHubリポジトリ](https://github.com/indooorsman/esbuild-css-modules-plugin))\n\n\ndeclareファイルを`src/`以下に置いておく。\n```typescript\n// index.d.ts\ndeclare module '*.css' {\n  interface IClassNames {\n    [className: string]: string\n  }\n  const classNames: IClassNames;\n  export = classNames;\n}\n```\n\n\n### 周辺用語\n- CSS modules\n- PostCSS\n\n\n### 参考文献\n- [GitHubリポジトリ - esbuild](https://github.com/evanw/esbuild)\n- [How to set up CSS Modules with esbuild](https://how-to.dev/how-to-set-up-css-modules-with-esbuild)\n- [GitHubリポジトリ - esbuild-css-modules-plugin](https://github.com/indooorsman/esbuild-css-modules-plugin))\n- [esbuild の機能が足りないならプラグインを自作すればいいじゃない](https://www.kabuku.co.jp/developers/create-your-own-esbuild-plugin)"},{"slug":"ts-jest-fail-because-import-global-jset","frontmatter":{"title":"Jest(ts-jest)で作ったはずのmockがundefinedになるエラー","description":"Jestで遭遇したエラー","date":"2022-09-19","tag":["Jest","TypeScript","JavaScript"]},"content":"### 結論\nts-jest?esmで書いてるから？とりあえずでimportするのやめよう。\n\n### 状況\nJestの右も左もわからないがfetcをmockしてゴニョゴニョしていた。  \n[公式の例](https://jestjs.io/docs/mock-function-api/#jestmockedsource)にもnode-fetchを使った例が載ってるぐらいなので、コピペして動かそうとしていたら問題発生。\n\n\n以下のエラーが発生した。\n```jsstacktrace\nTypeError: mockGetImageFromWeb.mockClear is not a function\n  23 |\n  24 |   afterEach(() => {\n> 25 |     mockGetImageFromWeb.mockClear()\n     |                         ^\n  26 |   })\n  27 |   test('should be defined', () => {\n  28 |     expect(getImageFromWeb).toBeDefined()\n```\n\nコピペしたコードはこれ\n```js\nimport {expect, jest, test} from '@jest/globals';\nimport type {fetch} from 'node-fetch';\n\njest.mock('node-fetch');\n\nlet mockedFetch: jest.Mocked<typeof fetch>;\n\nafterEach(() => {\n  mockedFetch.mockClear();\n});\n\ntest('makes correct call', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n\ntest('returns correct data', () => {\n  mockedFetch = getMockedFetch();\n  // ...\n});\n```\n\n\n### 対応\nコピペしてきたtestファイルで以下のインポート文を削除したら動いた。\n```js\nimport { expect, jest, test } from '@jest/globals'\n```\n\n### 参考文献\n- [Mock Functions · Jest](https://jestjs.io/docs/mock-function-api/#jestmockedsource)\n- [How To Mock Fetch in Jest | Leigh Halliday](https://www.leighhalliday.com/mock-fetch-jest)\n\n\n"},{"slug":"ts-strict-property-check","frontmatter":{"title":"TypeScriptでオブジェクトのプロパティをチェックしたい時の解決方法2選","description":"オブジェクトのプロパティを検査したい時の解決策を2つ紹介","date":"2023-05-26","tag":["TypeScript"]},"content":"\n### TL;DR\n個人的推しは2個目のこっち。\n```ts\ntype Impossible<K extends keyof any> = {\n  [P in K]: never;\n};\n\ntype NoExtraProperties<T, U extends T = T> = U & Impossible<Exclude<keyof U, keyof T>>;\n```\n\n### 解決したい事象\n次のようなコードはTypeScriptではエラーになりません。\n```ts\ninterface User {\n  name: string\n  email: string\n}\nconst user = {\n  name: 'John',\n  email: 'john@sample.example',\n  password: 'password'\n}\n\n// passwordは型定義にはない\nfunction checkUser(input: User): boolean {\n  return !!input.name && !!input.email\n}\ncheckUser(user)\n```\n\nこれでは必要のないpasswordというプロパティも取り回してしまい、不都合がある場合もあります。\n\n\n### 解決策\nstack overflowでは次の2019年に投稿された2つの解決策が支持を得ていました。\n\n#### 解決策1\n```ts\ntype StrictPropertyCheck<T, TExpected, TError> = Exclude<keyof T, keyof TExpected> extends never ? {} : TError;\n```\nこれを先ほどの例に当てはめれると次のようになります。\n```ts\nfunction checkUser<T extends User>(\n  input: T & StrictPropertyCheck<T, User, 'MyError'>\n): boolean {\n  return !!input.name && !!input.email\n}\ncheckUser(user)\n```\n\n```jsstacktrace\n型 '{ name: string; email: string; password: string; }' の引数を型 '{ name: string; email: string; password: string; } & \"MyError\"' のパラメーターに割り当てることはできません。\n  型 '{ name: string; email: string; password: string; }' を型 '\"MyError\"' に割り当てることはできません。ts(2345)\n```\n\n\n#### 解決策2\n```ts\ntype Impossible<K extends keyof any> = {\n  [P in K]: never;\n};\n\ntype NoExtraProperties<T, U extends T = T> = U & Impossible<Exclude<keyof U, keyof T>>;\n```\n例は以下\n```ts\nfunction checkUser<T extends User>(input: NoExtraProperties<User, T>): boolean {\n  return !!input.name && !!input.email\n}\ncheckUser(user)\n```\n```jsstacktrace\n型 '{ name: string; email: string; password: string; }' の引数を型 'NoExtraProperties<User, { name: string; email: string; password: string; }>' のパラメーターに割り当てることはできません。\n  型 '{ name: string; email: string; password: string; }' を型 'Impossible<\"password\">' に割り当てることはできません。\n    プロパティ 'password' の型に互換性がありません。\n      型 'string' を型 'never' に割り当てることはできません。ts(2345)\n```\nどのプロパティがエラーとなるのかがわかりやすい点と利用するときの記述の簡単さが推しポイントです。  \nその代わり、Impossibleの使い道が他に思いつかない点が少し気がかりです。  \nコチラの方が個人的には好みです。  \n\n\n### 参考文献\n- [Forcing excess-property checking on variable passed to TypeScript function - Stack Overflow](https://stackoverflow.com/questions/54775790/forcing-excess-property-checking-on-variable-passed-to-typescript-function)\n- [Is it possible to restrict TypeScript object to contain only properties defined by its class? - Stack Overflow](https://stackoverflow.com/questions/49580725/is-it-possible-to-restrict-typescript-object-to-contain-only-properties-defined)"},{"slug":"typescript-compile","frontmatter":{"title":"TypeScriptをネイティブコンパイルするって？","description":"僕の疑問に追記する形で更新しています。","date":"2021-12-26","tag":["TypeScript","Deno"]},"content":"\n### 疑問\ntypescriptをjavascriptを挟まずにネイティブコードにコンパイルするようなプロジェクトはないのか？\n\n### 自分なりの回答\nないよ。\n\nDenoがTypeScriptコードをサポートしているが、中ではコンパイラが一度JavaScriptに変換している。\n\nマイクロソフトがTypeScriptコンパイラAPIをwikiにしてくれている。\n[https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API](https://github.com/microsoft/TypeScript/wiki/Using-the-Compiler-API)"}]},"__N_SSG":true}