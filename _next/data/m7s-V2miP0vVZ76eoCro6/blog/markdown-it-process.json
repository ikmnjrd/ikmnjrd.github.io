{"pageProps":{"frontmatter":{"title":"markdown-itのプラグイン開発に失敗したのでメモ","date":"2022-08-07","tag":["JavaScript","Node.js"]},"slug":"markdown-it-process","innerHtml":"<p>失敗したけど、悔しいので調べたことのメモとそのプラグインの<a href=\"https://github.com/ikmnjrd/markdown-it-bqcite\">リポジトリ</a>\n作ろうとした機能は、<code>&lt;blockquote/&gt;</code> 内の特定prefixから始まる箇所を<code>&lt;cite/&gt;</code>で囲もうとういうもの。</p>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token blockquote punctuation\">></span> 内容はこれ\n<span class=\"token blockquote punctuation\">></span> --- 出典はこれ\n</code></pre>\n<p>こんなのを</p>\n<blockquote>\n<p>内容はこれ\n<cite>出典はこれ</cite></p>\n</blockquote>\n<p>こんな風に出力したかった</p>\n<h3 id=\"markdown-it%E3%81%AE%E5%87%A6%E7%90%86%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%AA%E6%B5%81%E3%82%8C\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#markdown-it%E3%81%AE%E5%87%A6%E7%90%86%E3%81%AE%E5%A4%A7%E3%81%8D%E3%81%AA%E6%B5%81%E3%82%8C\" aria-hidden=\"true\">#</a> markdown-itの処理の大きな流れ</h3>\n<ol>\n<li>ソース(.md)をToken単位にまずparse。この際、inlineやblockといった固まりで放置されるものがある。</li>\n<li>1.でparseしたものをStringとして出力しながらinlineやblockで放置されたものをそれぞれのルールに従いながらパース。パースしながら出力</li>\n</ol>\n<h3 id=\"%E6%B5%81%E3%82%8C\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E6%B5%81%E3%82%8C\" aria-hidden=\"true\">#</a> 流れ</h3>\n<p>MarkdownIt#render(src)</p>\n<p>MarkdownIt#parse(src)</p>\n<p>state = new this.core.State(src, this, env);\n// Tokenクラスの読み込み初期化など</p>\n<p>this.core.process(state)\n// coreルールを順にstateを引き回しながら実行\n// stateをToken[]にparse終了</p>\n<p>MarkdownIt#renderer#renderを実行。token.typeがinlineならRenderer#renderInlineを実行。独自ルールのあるtoken.typeならそのルールを実行。どちらにも当てはまらないならRenderer#renderTokenを実行</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token class-name\">Renderer</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">render</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">tokens<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> env</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> i<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span>\n      result <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      rules <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rules<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> len <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    type <span class=\"token operator\">=</span> tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'inline'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderInline</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>children<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> rules<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> rules<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">renderToken</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">,</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Renderer#renderInlinの処理例</p>\n<p>Renderer#renderTokenの処理例\nToken.hiddenなら空文字を返す</p>\n<p>ouTokensに追加?意味わからん</p>\n<h3 id=\"%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%9F.md\" tabindex=\"-1\"><a class=\"header-anchor\" href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AB%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%9F.md\" aria-hidden=\"true\">#</a> テストに使ってた.md</h3>\n<pre class=\"language-md\"><code class=\"language-md\"><span class=\"token blockquote punctuation\">></span> this\n<span class=\"token blockquote punctuation\">></span> is\n<span class=\"token blockquote punctuation\">></span> test\n<span class=\"token blockquote punctuation\">></span> --- in-cite\n\n<span class=\"token comment\">&lt;!-- >>> second\n--- in-cite --></span>\n\n\n<span class=\"token comment\">&lt;!-- >>> aaa\nbbb\nccc --></span>\n\n<span class=\"token blockquote punctuation\">></span> <span class=\"token code-snippet code keyword\">`hoge`</span>\n<span class=\"token blockquote punctuation\">></span> hoge\n\n<span class=\"token blockquote punctuation\">></span> link in cite\n<span class=\"token blockquote punctuation\">></span> --- <span class=\"token url\">[<span class=\"token content\">link</span>](<span class=\"token url\">https://github.com/markdown-it/markdown-it/blob/master/lib/renderer.js</span>)</span>\n</code></pre>\n","createdAt":"2022-10-17","updatedAt":"2022-10-17"},"__N_SSG":true}