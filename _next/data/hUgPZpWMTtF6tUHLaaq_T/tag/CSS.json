{"pageProps":{"tag":"CSS","posts":[{"slug":"css-hue-vs-oklch","frontmatter":{"title":"CSSの色関数について調べたこと","description":"色関数について調べたことと感想","date":"2024-06-20","tag":["CSS","デザイン"]},"content":"\n## 色関数とは\nrgb(255,255,255)はもろに色関数。色関数にも種類があり、rgbのRGBAやHSLはCSS Color Module 3(2011年)のもの。次世代のCSS Color Module 4ではHWBやOklchなどがある。  \n\n\n## HSLとOKLCHの比較\n\n| 特性          | HSL                    | OKLCH                          |\n|--------------|------------------------|--------------------------------|\n| **CSSでの指定** | hsl(H S L[ / A])      |  oklch(L C H[ / A])             |\n| **色相 (H)** | 0から360度の範囲        | 0から360度の範囲                |\n| **彩度 (S/C)** | 0%から100% (パーセンテージ) | 数値で表され、最大値は色空間に依存 |\n| **明度 (L)** | 0%から100% (パーセンテージ) | 0から100の範囲の数値             |\n| **色の表現** | 直感的で使いやすい      | 色の知覚的均一性に優れる         |\n| **用途**     | 一般的なWebデザインやアプリケーション | 専門的なデザインや色の一貫性が重要な用途 |\n| **色の調整** | 色相を変えるだけで簡単に色のバリエーションを生成 | 明度や彩度を変えても色相が保持されるため、異なる明度での色の調和が容易 |\n\n### 説明:\n\n- **色相 (Hue)**: 両モデルともに色相は度数で表され、色の種類（赤、緑、青など）を定義します。\n- **彩度 (Saturation/Chroma)**: HSLではパーセンテージで彩度を表し、色の鮮やかさを示す。OKLCHでは彩度が数値で表され、色の純度を示すため、より精密な色調整が可能\n- **明度 (Lightness)**: HSLでは明度もパーセンテージで表され、0%が黒、100%が白。OKLCHでは明度が数値で表され、より広範な色調整が可能\n- **色の表現と用途**: HSLは直感的で、誰でも簡単に色を選ぶことができるが、OKLCHは色の均一性を重視しており、専門的な用途に使われるらしい。\n\nどちらにも基準の色から色を足し引き等で指定できる。  \nhsl(from rgb(200 0 0) calc(h + 30) s calc(l + 30))  \noklch(from hsl(180 100% 50%) calc(l - 0.1) c h)  \n\n## 感想\n使うのは実際骨が折れそう。特にデザイナーは慣れない色指定方法になるだろうし。  \nエンジニア視点だと基準を決めればそれに応じた色を出せるようになるというのは夢があるが。\n\n\n\n### 参考文献\n- [Xユーザーのjhey ▲🐻🎈さん: 「Use CSS relative color syntax to darken/lighten colors for borders, backgrounds, etc. 🔥](https://x.com/jh3yy/status/1770948509933445269)\n- [Theming with CSS color functions 🤙](https://codepen.io/jh3y/pen/rNbmBrE)\n- [oklch() - CSS: Cascading Style Sheets | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/oklch)\n- [hsl() - CSS: Cascading Style Sheets | MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl)\n- [CSS の 色関数 について #CSS3 - Qiita](https://qiita.com/pon_u/items/0c216ee81f3b7aa04f98)\n"},{"slug":"css-position-sticky","frontmatter":{"title":"フッター固定のCSSトリックから学ぶsticky","description":"最優のフッター固定CSSからposition=stickyを動かして理解する","date":"2024-06-16","tag":["HTML","CSS"]},"content":"\n\n## stickyを使ったフッターの実装\nよく見る残念な実装に、コンテンツ量が少なくフッターが画面下に貼り付かないことがありますが、以下の例はコンテンツ量が少なくても大丈夫でこのコード量なので現時点でもっとも優れた実装だと思います。\n\n```html\n<html>\n  <body>\n    <main>\n      ここには色々。100vhを超えるものも入ったり。\n    </main>\n    <footer>\n      これはフッターです\n    </footer>\n  </body>\n</html>\n```\n\n```css\nbody { min-height: 100%;}\n\nbody > footer {\n  position: sticky;\n  top: 100vh; // もしくはbottom: 0\n}\n```\n\n## stickyの解説\nそもそも、position: sticky とはMDNによれば\n\n> `sticky`\n> 要素は文書の通常のフローに従って配置され、直近のスクロールする祖先および包含ブロック（直近のブロックレベル祖先、表関連要素を含む）に対して top, right, bottom, left の値に基づいて相対配置されます。このオフセットは他の要素の配置には影響を与えません。\n> この値は、常に新しい重ね合わせコンテキストを生成します。なお粘着要素は、直近の祖先がスクロールしない場合でも、「スクロールの仕組み」を持つ直近の祖先（overflow が hidden, scroll, auto, overlay として作成されたもの）に「粘着」します。\n> <cite>引用元: [position - CSS: カスケーディングスタイルシート | MDN](https://developer.mozilla.org/ja/docs/Web/CSS/position#sticky)</cite>\n\n難しい言葉がでてきますが、私なりに簡単に要約するなら「スクロールの機能を持つ直近の包含ブロックにくっつく」ことだと言ってみます。  \n\n包含ブロックというのは「widthやheightを%指定したとき、その元となる要素（ブロック）」という理解でまずは大丈夫です。詳しくはMDNの[こちら](https://developer.mozilla.org/ja/docs/Web/CSS/Containing_block#%E5%8C%85%E5%90%AB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E8%AD%98%E5%88%A5)のページで。\n\n\n\n### stickyの理解のためのデモ\n\n`try-change-height`クラスのheight指定部分を色々と触ってみてください。\n<iframe src=\"https://codesandbox.io/p/devbox/position-sticky-ycj8mq?file=%2Fstyles.css&embed=1\"\n     style=\"width:100%; height: 500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"position-sticky\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n\n\n\n### 参考文献\n- [この実装方法は巧い！ コンテンツが少ない量でもフッタを一番下に配置するCSSのテクニック | コリス](https://coliss.com/articles/build-websites/operation/css/clever-sticky-footer-technique.html)\n- [position - CSS: カスケーディングスタイルシート | MDN](https://developer.mozilla.org/ja/docs/Web/CSS/position#sticky)\n- [レイアウトと包含ブロック - CSS: カスケーディングスタイルシート | MDN](https://developer.mozilla.org/ja/docs/Web/CSS/Containing_block#%E5%8C%85%E5%90%AB%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AE%E8%AD%98%E5%88%A5)\n"},{"slug":"hamburger-css-animation","frontmatter":{"title":"CSSアニメーションで作るハンバーガーメニュー","date":"2022-01-12","tag":["CSS"]},"content":"\n## サンプルコード\n\n<p class=\"codepen\" data-height=\"300\" data-default-tab=\"html,result\" data-slug-hash=\"RwLeEOj\" data-user=\"ikmnjrd\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/ikmnjrd/pen/RwLeEOj\">\n  CSS-hamburger</a> by ike (<a href=\"https://codepen.io/ikmnjrd\">@ikmnjrd</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n\n\n### 重要なポイント\n\n#### CSSプロパティ\n```css\nbackground: currentColor;\n```\n参考:[https://zenn.dev/phi/articles/css-tips-currentcolor](https://zenn.dev/phi/articles/css-tips-currentcolor)\n\n#### アニメーションのイージング\n- `cubic-bezier`\n  - [cubic-bezier を知る。](https://qiita.com/96usa_koi/items/6f313f1d664806a77313)\n\n#### アニメーション\n座標変換の原点を設定する`transform-origin`\n\n#### WAI-ARIA\naria-expanded=\"false\"\n\n"},{"slug":"neumorphism-sample","frontmatter":{"title":"Neumorphismサンプル","date":"2022-02-01","tag":["CSS"]},"content":"\n## Sandbox\n\n\n<iframe src=\"https://codesandbox.io/embed/beautiful-darwin-4gf3h?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"beautiful-darwin-4gf3h\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n## ポイント\n\n### SVG化した文字に陰影をつける\n\ncssではこのようにすると綺麗に抜ける。\n```css\nsvg {\n  filter: drop-shadow(3px 3px 3px #fff)\n    drop-shadow(-3px -3px 1px rgba(0, 0, 0, 0.15));\n}\n```\nhtml上では、適宜fillやstrokeを設定する。\n\n[https://danmarshall.github.io/google-font-to-svg-path/](https://danmarshall.github.io/google-font-to-svg-path/)（[GitHubリポジトリ](https://github.com/danmarshall/google-font-to-svg-path)）を使って文字を事前にSVG化しておく。\n\nnpmパッケージで似たものを提供している人もいる[https://github.com/shrhdk/text-to-svg](https://github.com/shrhdk/text-to-svg)\n"},{"slug":"safari-before-block","frontmatter":{"title":"疑似要素を使ったチェックボックスを書いた際にSafariで困ったこと","date":"2023-03-31","tag":["CSS","Safari"]},"content":"\nチェックボックスを少し洒落たデザインにする時、疑似要素の:beforeと:afterを使って実装すると思う。そんな時にsafariで困った時の備忘録。  \n\n### 実装の雰囲気\n```html\n<div class=\"box\">\n  <input id=\"checkbox_1\" type=\"checkbox\" class=\"no-display\" />\n  <label for=\"checkbox_1\" class=\"designed\"><span>テキスト</span></label>\n</div>\n```\n```css\n.box {\n  position: relative;\n}\n.no-display {\n  display: none;\n}\n.designed:before,\n.designed:after {\n  position: absolute;\n  content: \"\";\n  display: block;\n}\n.designed:before {\n  z-index: 1;\n  border-right: 2px solid #000;\n  border-bottom: 2px solid #000;\n  left: 7px;\n  width: 5px;\n  height: 8px;\n  top: 3px;\n  transform: rotate(45deg);\n  opacity: 0;\n}\n.designed:after {\n  content: \"\";\n  border: 1px solid #d3d5d5;\n  border-radius: 4px;\n  top: 0;\n  left: 0;\n  width: 18px;\n  height: 18px;\n  background-color: #fff;\n}\n.designed > span {\n  margin-left: 24px;\n}\n.no-display:checked + .designed:before {\n  opacity: 1;\n}\n\n```\n\n### 問題の状態\n問題になった箇所がsafariで、`position: absolute`をしていしているにも関わらず、疑似要素が before - 要素 - afterの順を崩してくれない。  \nそのためbeforeとafterの要素を重ね合わせたいのに分離してしまっている。  \n\n- safariでのレンダリング結果\n![OSX-safari(16.0)でのレンダリング結果](https://i.gyazo.com/e63e9404ae95aa49af9b4616f9c4d15a.png)\n\n- Chrome等でのレンダリング結果\n![OSX-Braveでのレンダリング結果](https://i.gyazo.com/a4a4deec03d659f3a271762295f3c265.png)\n\n### 対策\n自分に何の理解が足りていないのかがいまいち判然としませんが、「span(非変形可能要素)にtransformが効かないようなものかな〜」と感じて、上記コードを次のようにすることで無理やり解決しました。\n\n\n```css\n.box {\n  position: relative;\n  display: flex;\n  justify-content: left;\n}\n```\n\n場当たり感が否めません。\n\n\n### 検証に使ったsandbox\nsafari用のものが見たいならsafariで開き、chrome用のものが見たいならchromeで開いてください。頭痛が痛い。  \n<iframe src=\"https://codesandbox.io/embed/pedantic-nash-sr1d7v?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"pedantic-nash-sr1d7v\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>"},{"slug":"subpixel-rendering","frontmatter":{"title":"サブピクセルレンダリングってなんだ？","description":"transformを過剰にあてた結果、ぼやけて表示されるフォントに救いのてはあるのか？いや、ない。","date":"2023-05-25","tag":["HTML","CSS","デザイン"]},"content":"\n### 疑問に遭遇した状況\ncssでtransformを使ったスタイリングが、なぜかWindows環境だけで見受けられるぼやけるという報告を受けて、ぼやっと[キャンバスの最適化](https://developer.mozilla.org/ja/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas)のページを見ていると次のような記述がありました。\n> キャンバスで整数以外の値を使用してオブジェクトを描画すると、サブピクセルレンダリングを実行します。\n> <cite>出典: [浮動小数点数値の座標を避けて整数を使用](https://developer.mozilla.org/ja/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas#%E6%B5%AE%E5%8B%95%E5%B0%8F%E6%95%B0%E7%82%B9%E6%95%B0%E5%80%A4%E3%81%AE%E5%BA%A7%E6%A8%99%E3%82%92%E9%81%BF%E3%81%91%E3%81%A6%E6%95%B4%E6%95%B0%E3%82%92%E4%BD%BF%E7%94%A8)</cite>\n\n### サブピクセルレンダリングとは\nwikipediaによると\n> サブピクセルレンダリング(Subpixel rendering)とは、液晶・有機ELモニタ上のピクセルを構成する三原色の発光源を、仮想的にそれぞれ一つのピクセルとみなして横方向に三倍の解像度を得る技術のことである。 アンチエイリアスの一種。\n> <cite>出典: [サブピクセルレンダリング - Wikipedia](https://ja.wikipedia.org/wiki/%E3%82%B5%E3%83%96%E3%83%94%E3%82%AF%E3%82%BB%E3%83%AB%E3%83%AC%E3%83%B3%E3%83%80%E3%83%AA%E3%83%B3%E3%82%B0)</cite>\n>\n\nアンチエイリアスといえば、斜めにギザギザしたものをできるだけ真っ直ぐ見せるための技術と理解してる。  \n各種ブラウザ（とOSが協調している）はデフォルトでアンチエイリアスが効いている。  \nそしてCSSではfont-smoothというプロパティがある。  \n```css\n.something {\n  -webkit-font-smoothing: antialiased; // auto | none | antialiased | subpixel-antialiased\n  -moz-osx-font-smoothing: grayscale; // auto | grayscale\n}\n```\n主にすでにかかったアンチエイリアスを効かせない方向に調整するためのもの。  \n要は綺麗に見せたい場合では、ブラウザとOSに任せるしかなく、transformを適用しすぎてジャギジャギのままになった箇所はtransformによるスタイリングをやめるほかないと思う。  \n試せていないが、遭遇したのは少数を含む指定だったので、transformを過剰に使ってもその指定が整数ならもしかするかもしれない（整数で済むような要件ならtransformを使っていない気がする）。\n\n直接この答えになるような記事等は見つけられていないがMDNには次のような記述もある\n> CSS 座標変換は、 GPU を使用しますのでより高速です。もっともよいのは拡大縮小しないことですが、そうでなければ大きなキャンバスを縮小するよりも小さなキャンバスを拡大したほうが良好です。\n> <cite>出典: [CSS 座標変換を使用してキャンバスを拡大縮小する](https://developer.mozilla.org/ja/docs/Web/API/Canvas_API/Tutorial/Optimizing_canvas#css_%E5%BA%A7%E6%A8%99%E5%A4%89%E6%8F%9B%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%82%AD%E3%83%A3%E3%83%B3%E3%83%90%E3%82%B9%E3%82%92%E6%8B%A1%E5%A4%A7%E7%B8%AE%E5%B0%8F%E3%81%99%E3%82%8B)</cite>\n\ncanvasと同一視するのはどうかとも思うが、大きく離れてもいなさそうだと思う私でした。\n\n### 参考文献\n- [Webブラウザにおける文字のアンチエイリアスの現状の最適解 | dwango creators' blog（ドワンゴクリエイターズブログ）](http://creator.dwango.co.jp/14128.html)\n- [CSS 座標変換の使用 - CSS: カスケーディングスタイルシート | MDN](https://developer.mozilla.org/ja/docs/Web/CSS/CSS_Transforms/Using_CSS_transforms)\n- [font-smooth - CSS: カスケーディングスタイルシート | MDN](https://developer.mozilla.org/ja/docs/Web/CSS/font-smooth)"}]},"__N_SSG":true}