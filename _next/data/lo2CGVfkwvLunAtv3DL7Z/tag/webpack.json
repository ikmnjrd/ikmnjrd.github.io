{"pageProps":{"tag":"webpack","posts":[{"slug":"Next-webpack","frontmatter":{"title":"Next.jsがWebpackを使うから嫌いという話","date":"2022-02-09","tag":["webpack","Next.js","JavaScript"]},"content":"\n今まであまりrequireとimportなどの違いを意識できていない人間。\nNext.jsをプロジェクトに導入するのは賛成をとるが、個人のプロジェクトにはあまり使いたくないなーと思う程度の距離感を保っていた人間だった。現在無職。\n\nしかし、新たな職場を探すにあたってReactは使うのにNext.jsを触ったことがないというのは自分の選択肢を狭めるだけだと考え、無職期間に作り直そうとしていたRuby(Jekyll)製ブログを、Next.jsのSSGの仕組みを用いて作ることにした。（本当はメジャーバージョンがリリースされたばかりのeleventy.jsを使って作りたかった。フレームワークに求めているもの的にもeleventyの方が合っていたと今も感じる。1週間ほどはeleventy.js製のブログだった時期もある。）\n\n同リポジトリ内にマークダウンでブログ記事を上げるため、ビルド時に色々なものを生成したい要件が出てくる。Next.jsは内部でwebpackを使っていて`next.config.js`ではその一端を見ることができる。\n\n```javascript\nmodule.exports = {\n  reactStrictMode: true,\n  webpack(config, { isServer }) {\n    if (isServer) {\n      require('./scripts/generate-sitemap.js')\n    }\n  }\n}\n```\n\nwebpackはCommonJSで書かれていることは事前知識として知っていた。\n\nとは言ってもimportやexportが使いたい。`package.json`に`\"type\": \"module\"`を追加する方法などを試してみるが、最終的にproduction buildの際のfsモジュールが解決できないとか`Import trace for requested module:\n./pages/_app.js`などのエラーメッセージを残して終了していくプログラムを見るとイライラしてくる。\n\n勉強のためとはいえ、今度からNode.jsではなくDenoを使おうかなという気持ちになった。\n\n\n\n### 周辺用語\n- commonJS\n- ESModules\n- ES6(ES2015)\n\n### 参考文献\n- [Build a sitemap generator in Next.js - LogRocket Blog](https://blog.logrocket.com/build-sitemap-generator-nextjs/)\n- [Support ES module format (ESM) in next.config.js #9607](https://github.com/vercel/next.js/issues/9607)\n- [Support ES module format (ESM) in next.config.js #32239](https://github.com/vercel/next.js/discussions/32239)"},{"slug":"webpack-buffer-on-nodejs","frontmatter":{"title":"WebpackでBuffer（Node.js）を使う","date":"2022-01-02","tag":["webpack","Node.js"]},"content":"\n駆け出しエンジニアのふわっとした理解を書く。\nNode.jsのコアモジュールであるBuffer()をフロント側で使いたいときがあるらしい。[参考の該当箇所](https://github.com/CyberAgentHack/web-speed-hackathon-2021/blob/135468cc9f69f6f27ba0bc9d3b74d60f1ebe3a40/client/src/components/foundation/CoveredImage/CoveredImage.jsx#L21-L23)（パフォーマンスチューニングを行う元して書かれたソースコードなので、ベストプラクティス的ではないのかもしれないが、初心者の私には判断つきません）\n```javascript\nconst imageSize = React.useMemo(() => {\n  return data !== null ? sizeOf(Buffer.from(data)) : null;\n}, [data]);\n```\n\n\n### 解決策\n解決策(といっても、元々のソースコードに書かれていたが)、下に記載する設定がないとブラウザから怒られてしまいます。\n```bash\nCoveredImage.jsx:22 Uncaught ReferenceError: Buffer is not defined\n```\n\n\n`webpack.config.js` に以下のように追記する。\n```javascript\nplugins: [\n    new webpack.ProvidePlugin({\n      Buffer: ['buffer', 'Buffer'],\n    }),\n]\n```\n\n\n\n### 参考文献\n- [https://github.com/diegomura/react-pdf/issues/1029](https://github.com/diegomura/react-pdf/issues/1029)\n- [https://github.com/CyberAgentHack/web-speed-hackathon-2021](https://github.com/CyberAgentHack/web-speed-hackathon-2021)\n- [https://webpack.js.org/plugins/provide-plugin/](https://webpack.js.org/plugins/provide-plugin/)\n"}]},"__N_SSG":true}